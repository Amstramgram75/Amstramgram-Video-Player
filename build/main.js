/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/build/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./app/css/amstramgramVideoPlayer.scss":
/*!*********************************************!*\
  !*** ./app/css/amstramgramVideoPlayer.scss ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("// extracted by mini-css-extract-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9hcHAvY3NzL2Ftc3RyYW1ncmFtVmlkZW9QbGF5ZXIuc2Nzcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy9EOlxcTGF1cmVudFxcRG9jdW1lbnRzXFxIdG1sXFxhbXN0cmFtZ3JhbVZpZGVvUGxheWVyXFxhcHBcXGNzc1xcYW1zdHJhbWdyYW1WaWRlb1BsYXllci5zY3NzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpbiJdLCJtYXBwaW5ncyI6IkFBQUEiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./app/css/amstramgramVideoPlayer.scss\n");

/***/ }),

/***/ "./app/js/amstramgramVideoPlayer.js":
/*!******************************************!*\
  !*** ./app/js/amstramgramVideoPlayer.js ***!
  \******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return AmstramgramVideoPlayer; });\n/* harmony import */ var _css_amstramgramVideoPlayer_scss__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../css/amstramgramVideoPlayer.scss */ \"./app/css/amstramgramVideoPlayer.scss\");\n/* harmony import */ var _css_amstramgramVideoPlayer_scss__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_css_amstramgramVideoPlayer_scss__WEBPACK_IMPORTED_MODULE_0__);\n\r\n\r\n/*TODO :\r\n  Menu contextuel\r\n  Tuto thumnails\r\n  Test paramètres\r\n*/\r\n\r\n/*  \r\n  AmstramgramVideoPlayer.players : tableau des players\r\n  AmstramgramVideoPlayer.currentPlayer : player en cours de lecture\r\n  AmstramgramVideoPlayer.currentFullScreenPlayer : player en mode plein écran\r\n  AmstramgramVideoPlayer.defaultOptions :\r\n    PROPRIÉTÉS PROPRES À LA SOURCE\r\n    - autoplay : si true, l'attribut autoplay est posé sur le tag <video>.\r\n      À noter que la lecture automatique sera bloquée si le volume n'est pas nul.\r\n      Défaut : false.\r\n    - crossorigin : attribut posé sur le tag <video>.\r\n      Défaut : false.\r\n    - download : propriétés du bouton Download.\r\n        - label :     texte affecté au titre du bouton et à son attribut aria-label\r\n                      Défaut : \"Télécharger\".\r\n        - disabled :  si true, le bouton porte l'attribut disabled et demeure donc inactif.\r\n                      Défaut : false.         \r\n        - hidden :    si true, la propriété display du bouton est passée en 'hidden' et le bouton est donc invisible.\r\n                      Défaut : false.         \r\n      Défaut : {label:'Télécharger', disabled:false, hidden:false}.\r\n    - duration :  durée de la vidéo exprimée en seconde.\r\n      Ce paramètre est mis à jour sur les événement loadedmetadata et durationchange de la vidéo.\r\n      Défaut : 120.\r\n    - format : format de la vidéo exprimée sous la forme d'un rapport (16/9, 4/3, etc.) ou d'un nombre.\r\n      Défaut : 16/9.\r\n    - fullscreen : propriétés du bouton Fullscreen.\r\n        - label : \r\n          - enter : texte affecté au titre du bouton et à son attribut aria-label en mode normal\r\n                    Défaut : \"Plein écran\".\r\n          - exit :  texte affecté au titre du bouton et à son attribut aria-label en mode plein écran\r\n                    Défaut : \"Quitter le plein écran\".\r\n        - disabled :  si true, le bouton porte l'attribut disabled et demeure donc inactif.\r\n                      Défaut : false.         \r\n        - hidden :    si true, la propriété display du bouton est passée en 'hidden' et le bouton est donc invisible.\r\n                      Défaut : false.         \r\n      Défaut :{label:{enter:'Plein écran', exit:'Quitter le plein écran'}, disabled:false, hidden:false}.\r\n    - loop : si true, l'attribut loop est posé sur le tag <video>.\r\n      Défaut : false.\r\n    - next : propriétés du bouton Next.\r\n        - label :     texte affecté au titre du bouton et à son attribut aria-label.\r\n                      Défaut : \"Suivant\".\r\n        - disabled :  si true, le bouton porte l'attribut disabled et demeure donc inactif.\r\n                      Défaut : true.         \r\n        - hidden :    si true, la propriété display du bouton est passée en 'hidden' et le bouton est donc invisible.\r\n                      Défaut : true.         \r\n      Défaut : {label:'Suivant', disabled:true, hidden:true},\r\n    - playsinline : si true, les attributs playsinline et webkit-playsinline sont posés sur le tag <video>.\r\n      Défaut : true.\r\n    - poster : source de l'image à afficher en poster.\r\n      Défaut : undefined.\r\n    - preload : attribut posé sur le tag <video>.\r\n      Défaut : 'none'.\r\n    - previous : propriétés du bouton Previous.\r\n        - label :     texte affecté au titre du bouton et à son attribut aria-label.\r\n                      Défaut : \"Précédent\".\r\n        - disabled :  si true, le bouton porte l'attribut disabled et demeure donc inactif.\r\n                      Défaut : true.         \r\n        - hidden :    si true, la propriété display du bouton est passée en 'hidden' et le bouton est donc invisible.\r\n                      Défaut : true.         \r\n      Défaut : {label:'Précédent', disabled:true, hidden:true}.\r\n    - skipTime: valeur attribuée au saut temporel réalisée par les flèches gauche et droite du clavier.\r\n      Elle s'exprime en secondes ou en pourcentage. Dans ce cas, la valeur résultante correspond à ce pourcentage appliqué à la durée du média.\r\n      Défaut : '1%'.\r\n    - thumbnails: Propriétés des vignettes.\r\n        - src :     source de l'image.\r\n                    L'image doit être constituée d'une seule bande de vignettes.\r\n                    Défaut : undefined.\r\n        - number :  nombre de vignettes.\r\n                    Ce nombre permet de déterminer la largeur d'une vignette = largeur de l'image / nombre de vignettes.\r\n                    Défaut : 100.\r\n      Défaut : {src:undefined, number:100}.\r\n    - volume :  volume à appliquer au média.\r\n                Doit être un nombre compris entre 0 et 1.\r\n      Défaut : 0.8.\r\n    - volumeButton : propriétés du bouton Volume.\r\n        - label : \r\n          - mute :  texte affecté au titre du bouton et à son attribut aria-label si le volume est supérieur à 0.\r\n                    Défaut : \"Désactiver le son\".\r\n          - exit :  texte affecté au titre du bouton et à son attribut aria-label si le volume est nul.\r\n                    Défaut : \"Activer le son\".\r\n        - disabled :  si true, le bouton porte l'attribut disabled et demeure donc inactif.\r\n                      Dans ce cas, le potentiomètre est caché.\r\n                      Défaut : false.         \r\n        - hidden :    si true, la propriété display du bouton est passée en 'hidden' et le bouton est donc invisible.\r\n                      Dans ce cas, le potentiomètre est caché.\r\n                      Défaut : false.         \r\n      Défaut : {label:{mute:'Désactiver le son', unmute:'Activer le son'}, disabled:false, hidden:false}.\r\n    - volumeGroup : Nombre entier supérieur à zéro spécifiant le groupe de lecteurs qui partagent le même volume.\r\n                    Tout changement de volume intervenant sur un des lecteurs de ce groupe sera effectué sur les autres lecteurs du même groupe.\r\n      Défaut : 0 (Le lecteur n'appartient à aucun groupe).\r\n    PROPRIÉTÉS PROPRES AU LECTEUR\r\n    - hideControlsDelay : Exprimée en ms, durée du délai intervenant avant de cacher la barre de contrôle.\r\n      Défaut : 5000.\r\n    - videoVolumeOrientation : si ce paramètre n'est pas défini par la chaine 'horizontal', le potentiomètre de volume est en mode vertical.\r\n      Défaut : 'vertical'.\r\n    - railMinWidthForNormalUI : largeur minimale disponible pour la barre temporelle dans l'interface normale.\r\n      Si la largeur disponible pour la barre temporelle est inférieure à ce paramètre, l'interface bascule en mode compact.\r\n      Défaut : 600.\r\n    PROPRIÉTES GLOBALES\r\n    - appLabel : texte à appliquer à l'aria-label du lecteur.\r\n      Défaut : 'Lecteur vidéo'.\r\n    - playLabel : texte affecté au titre du bouton Pause et à son attribut aria-label.\r\n      Défaut : 'Pause'.\r\n    - playLabel : texte affecté au titre du bouton Play et à son attribut aria-label.\r\n      Défaut : 'Lecture'.\r\n    - volumeHelpLabel : texte à appliquer au titre du potentiomètre.\r\n      Défaut : 'Utilisez les flèches Haut/Bas du clavier pour augmenter ou diminuer le volume'.\r\n    - volumeSliderLabel : texte à appliquer à l'aria-label du potentiomètre.\r\n      Défaut : 'Potentiomètre de volume'.\r\n  \r\n  Les options autoplay, crossorigin, loop, playsinline, poster peuvent être attribuées via les attributs HTML du tag <video>.\r\n  Si, par ailleurs, le tag comporte des attributs width et height, le format de la vidéo sera déterminé par ces valeurs.\r\n  S'il comporte l'attribut muted, le volume sera interprété comme nul.\r\n  Les paramètres passés au constructeur priment sur les attributs HTML.\r\n  Les paramètres listés sous le titre \"PROPRIÉTÉS PROPRES À LA SOURCE\" peuvent toutes être redéfinies lors du changement de source.\r\n  Le constructeur intègre de surcroit une propriété facultative volumeForced. Si celle-ci est spécifiée à true, le volume passé en paramètre sera\r\n  appliqué au lecteur et à son groupe éventuel. Dans les autres cas, si le lecteur appartient à un groupe déjà existant,\r\n  c'est le volume de ce groupe qui lui sera appliqué.\r\n  Cette propriété est également applicable au changement de source.\r\n\r\n  EXEMPLES\r\n  1.\r\n    HTML : \r\n      <video id=\"myvideo\" src=\"myvideo.mp4\" poster=\"myvideo.jpg\" preload=\"auto\">\r\n    Javascript :\r\n      let player = new AmstramgramVideoPlayer(document.querySelector('#myvideo'))\r\n  2.\r\n    HTML : \r\n      <video id=\"myvideo\">\r\n    Javascript :\r\n      let player = new AmstramgramVideoPlayer(document.querySelector('#myvideo'), {\r\n        autoplay: true,\r\n        duration: 125,\r\n        format: 4/3,\r\n        next: {label:'La vidéo suivante', disabled:false, hidden:false}\r\n        preload: 'auto',\r\n        previous: {label: 'Rien à voir', hidden:false}\r\n        skipTime: '2%',\r\n        src: 'myvideo.mp4',\r\n        volume: 0,\r\n        volumeGroup: 1,\r\n        videoVolumeOrientation: 'horizontal',\r\n      })\r\n      Et plus tard :\r\n      player.src = {\r\n        format: 16/9,\r\n        duration: 850,\r\n        next: {label:'Plus rien', disabled:true}\r\n        poster: 'myvideo2.jpg',\r\n        preload: 'none',\r\n        previous: {label:'Revoir la vidéo précédente', disabled:false}\r\n        skipTime: '5%',\r\n        src: 'myvideo2.mp4',\r\n        volume: 0.5,\r\n        volumeForced: true\r\n      }\r\n\r\n  GETTERs/SETTERs\r\n    - src\r\n        - get : retourne la source du média\r\n        - set : définit une nouvelle source et éventuellement un certain nombre de propriétés\r\n          Prend en paramètre une chaine définissant le chemin de la source ou un objet : {\r\n              autoplay: false,\r\n              crossorigin: 'anoanymous',\r\n              download: {label:'Télécharger', disabled:false, hidden:false},\r\n              duration:  200,\r\n              format : 16/9,\r\n              fullscreen: {label:{enter:'Plein écran', exit:'Quitter le plein écran'}, disabled:false, hidden:false},\r\n              loop: false,\r\n              next: {label:'Suivant', disabled:true, hidden:true},\r\n              playsinline: true, \r\n              poster: 'source du poster',\r\n              preload: 'none',\r\n              previous: {label:'Précédent', disabled:true, hidden:true},\r\n              skipTime: '1%',\r\n              thumbnails: {src:'source de l'image', number:100},\r\n              volume: 0.8,\r\n              volumeButton: {label:{mute:'Désactiver le son', unmute:'Activer le son'}, disabled:false, hidden:false},\r\n              volumeGroup: 0,\r\n              (volumeForced: true,)\r\n          }\r\n    - currentTime\r\n        - get : retourne la position temporelle courante.\r\n        - set : améne la tête de lecture à la position spécifiée en secondes.\r\n    - volume\r\n        - get : retourne le niveau de volume.\r\n        - set : fixe le volume au niveau spécifié (nombre entre 0 et 1).\r\n\r\n  GETTERS\r\n    - duration : retourne la durée du média si elle est disponible.\r\n    - paused : retroune true si le média est en pause\r\n\r\n  MÉTHODES\r\n    - play() : met le média en lecture.\r\n    - pause() : met le média en pause.\r\n    - reset() : reset le lecteur.\r\n    - togglePlayPause() : passe le média en pause s'il est en lecture et réciproquement.\r\n    - hideControls(delayed = false, forced = false) : cache la barre de contôle\r\n        Si delayed vaut true, la disparition n'intervient qu'apres le délai fixé par le paramètre hideControlsDelay du lecteur.\r\n        Par défaut, la disparition est bloquée si la vidéo est en pause.\r\n        Pour la forcer, il faut passer le deuxième argument à true.\r\n    - showControls : montre la barre de contrôle.\r\n    - previous() : affecte de nouvelles propriétés au bouton Previous.\r\n        Prend en paramètre un objet de la forme : {label:'Précédent', disabled:true, hidden:true}.\r\n    - next() : affecte de nouvelles propriétés au bouton Next.\r\n        Prend en paramètre un objet de la forme : {label:'Suivant', disabled:true, hidden:true}.\r\n    - download() : affecte de nouvelles propriétés au bouton Download.\r\n        Prend en paramètre un objet de la forme : {label:'Télécharger', disabled:false, hidden:false}.\r\n    - fullscreen() : affecte de nouvelles propriétés au bouton Fullscreen.\r\n        Prend en paramètre un objet de la forme : {label:{enter:'Plein écran', exit:'Quitter le plein écran'}, disabled:false, hidden:false}.\r\n    - volumeButton() : affecte de nouvelles propriétés au bouton Volume.\r\n        Prend en paramètre un objet de la forme : {label:{mute:'Désactiver le son', unmute:'Activer le son'}, disabled:false, hidden:false}.\r\n  \r\n  MÉTHODE STATIQUE\r\n    options() : permet de redéfinir les propriétés par défaut de la class avant toute création d'instance.\r\n\r\n  PROPRIÉTÉS\r\n    - container : pointe sur l'élément HTML container du lecteur.\r\n    - media : pointe sur l'élément HTML <video> du lecteur.\r\n    - params : renvoie les paramètres du lecteur.\r\n*/\r\n\r\n/************************************************\r\n *                                              *\r\n *              INITIALISATION                  *\r\n *                                              *\r\n ************************************************/\r\nconst \r\n  w = window, \r\n  d = document,\r\n  //Définition du type de pointeur\r\n  //Si PointerEvent est détecté, le type vaut 'pointer'\r\n  //Sinon, si TouchEvent est détecté, le type vaut 'touch' et il y a fort à parier qu'on soit sur iOS\r\n  //Enfin, si jamais PointerEvent et TouchEvent ne sont pas détectés, le type vaut 'mouse'\r\n  myPointerType = (w.PointerEvent)?'pointer':(w.TouchEvent)?'touch':'mouse',\r\n  //On en déduit le nom des évènements correspondants\r\n  myPointerEnter = (myPointerType == 'touch')?'none':myPointerType + 'enter',\r\n  myPointerLeave = (myPointerType == 'touch')?'none':myPointerType + 'leave',\r\n  myPointerDown = (myPointerType == 'touch')?'touchstart':myPointerType + 'down',\r\n  myPointerUp = (myPointerType == 'touch')?'touchend':myPointerType + 'up',\r\n  myPointerMove = myPointerType + 'move',\r\n  //Détection de l'user agent pour savoir si on est sur mobile\r\n  //Dans ce cas, on ne crée pas de potentiomètre de volume\r\n  UA = w.navigator.userAgent.toLowerCase(),\r\n  IS_MOBILE = (/ipad|iphone|ipod/i.test(UA) && !w.MSStream) || /android/i.test(UA)\r\n\r\nif (typeof Object.assign !== 'function' || !Array.from || !Array.prototype.includes || typeof window.CustomEvent !== \"function\") {\r\n  const scripts= d.getElementsByTagName('script'),\r\n        path= scripts[scripts.length-1].src.split('?')[0],\r\n        mydir= path.split('/').slice(0, -1).join('/')+'/',\r\n        s = d.createElement('script')\r\n  s.async=\"false\"\r\n  s.src = mydir + \"amstramgramVideoPlayerPolyfill.min.js\"\r\n  d.head.appendChild(s)\r\n}\r\n\r\n//Edge ne comprend toujours pas getAttributeNames (IE11 non plus, bien évidemment)\r\nif (Element.prototype.getAttributeNames == undefined) {\r\n  Element.prototype.getAttributeNames = function () {\r\n    var a = this.attributes, l = a.length, r = new Array(l);\r\n    for (var i = 0; i < l; i++) {\r\n      r[i] = a[i].name\r\n    }\r\n    return r\r\n  };\r\n}\r\n//Détection du support de la fonctionnalité sessionStorage\r\nconst storage = (function(){\r\n  try {\r\n      let x = '__storage_test__'\r\n      w.sessionStorage.setItem(x, x)\r\n      w.sessionStorage.removeItem(x)\r\n      return w.sessionStorage\r\n  }\r\n  catch(e) {return false}\r\n})()\r\n/*\r\nSi sessionStorage est disponible, on y stocke toutes les fonctionnalités détectés\r\nafin de ne plus avoir de détection à opérer par la suite.\r\nOn y conserve également les informations de volume pour chaque groupe de lecteurs\r\n\r\nCalcul de la largeur des éléments indicateurs temporel.\r\nCes largeurs dépendent du navigateur et doivent être déterminées\r\npour assurer le bon positionnement des éléments.\r\nOn mesure les largeurs pour des temps :\r\n- inférieur à une heure (durée affichée : 00:00)\r\n- supérieur ou égal à une heure (durée affichée : 00:00:00)\r\n*/\r\nlet timeWidth, longTimeWidth\r\nif (storage && storage.getItem('amst_timeWidth')) {\r\n  timeWidth = storage.getItem('amst_timeWidth')\r\n  longTimeWidth = storage.getItem('amst_longTimeWidth')\r\n} else {\r\n  const \r\n    measureTime = d.createElement('div'), \r\n    measureLongTime = d.createElement('div')\r\n  //La class amst__measureTime reprend les mêmes propriétés graphiques que la class amst__time\r\n  //mais assure un positionnement absolu.\r\n  measureTime.classList.add('amst__measureTime')\r\n  measureTime.innerHTML = '<span>00:00<span>'\r\n  measureLongTime.classList.add('amst__measureTime')\r\n  measureLongTime.innerHTML = '<span>00:00:00<span>'\r\n  d.body.appendChild(measureTime)\r\n  d.body.appendChild(measureLongTime)\r\n  timeWidth = measureTime.offsetWidth + 2\r\n  longTimeWidth = measureLongTime.offsetWidth + 2\r\n  d.body.removeChild(measureTime);\r\n  d.body.removeChild(measureLongTime);\r\n  if (storage) {\r\n    storage.setItem('amst_timeWidth', timeWidth)\r\n    storage.setItem('amst_longTimeWidth', longTimeWidth)\r\n  }\r\n}\r\n//Insertion des règles déterminées dans le DOM\r\nconst style = d.createElement(\"style\")\r\n// WebKit hack\r\nstyle.appendChild(d.createTextNode(\"\"))\r\nd.head.appendChild(style)\r\nstyle.sheet.insertRule(`.amst__time>span{width:${timeWidth}px;`,0)\r\nstyle.sheet.insertRule(`.amst__long .amst__time>span{width:${longTimeWidth}px;`,0)\r\n\r\n\r\n//Détection de la fonctionnalité fullscreen et de ses éventuels préfixes\r\nlet fullscreenAPI = false\r\nif (storage && storage.getItem('amst_fullscreenAPI') != undefined) {\r\n  fullscreenAPI = JSON.parse(storage.getItem('amst_fullscreenAPI'))\r\n} else {\r\n  //https://github.com/sindresorhus/screenfull.js/\r\n  //Détection des préfixes pour la gestion du plein écran\r\n  fullscreenAPI = (function(){\r\n    let \r\n      val,\r\n      fnMap = [\r\n        ['requestFullscreen', 'exitFullscreen', 'fullscreenElement', 'fullscreenchange'],\r\n        // New WebKit\r\n        ['webkitRequestFullscreen', 'webkitExitFullscreen', 'webkitFullscreenElement', 'webkitfullscreenchange'],\r\n        // Old WebKit (Safari 5.1)\r\n        ['webkitRequestFullScreen', 'webkitCancelFullScreen', 'webkitCurrentFullScreenElement', 'webkitfullscreenchange'],\r\n        ['mozRequestFullScreen', 'mozCancelFullScreen', 'mozFullScreenElement', 'mozfullscreenchange'],\r\n        ['msRequestFullscreen', 'msExitFullscreen', 'msFullscreenElement', 'MSFullscreenChange']\r\n      ],\r\n      i = 0,\r\n      l = fnMap.length,\r\n      ret = {}\r\n    for (; i < l; i++) {\r\n      val = fnMap[i]\r\n      if (val && val[1] in d) {\r\n        for (i = 0; i < val.length; i++) {\r\n          ret[fnMap[0][i]] = val[i];\r\n        }\r\n        return ret\r\n      }\r\n    }\r\n    return false;\r\n  })()\r\n  storage.setItem('amst_fullscreenAPI', JSON.stringify(fullscreenAPI))\r\n}\r\n\r\n/*\r\nPRÉFIXES CSS\r\nDéfinition des préfixes propres aux navigateurs\r\npour les propriétés transform et transition\r\nafin de pouvoir les ajuster dans javascript\r\nhttps://gist.github.com/streunerlein/2935794\r\n*/\r\nlet transitionPrefix, transformPrefix\r\nif (storage && storage.getItem('amst_transitionPrefix') != undefined && storage.getItem('amst_transformPrefix') != undefined) {\r\n  transitionPrefix = storage.getItem('amst_transitionPrefix')\r\n  transformPrefix = storage.getItem('amst_transformPrefix')\r\n} else {\r\n  let GetVendorPrefix = function(arrayOfPrefixes) {\r\n    let tmp = d.createElement(\"div\"),\r\n        result = ''\r\n    for (let i = 0; i < arrayOfPrefixes.length; ++i) {\r\n      if (typeof tmp.style[arrayOfPrefixes[i]] != 'undefined'){\r\n        result = arrayOfPrefixes[i]\r\n        break;\r\n      }\r\n      else {\r\n        result = null\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n  transitionPrefix = GetVendorPrefix([\"transition\", \"msTransition\", \"MozTransition\", \"WebkitTransition\", \"OTransition\"])\r\n  transformPrefix = GetVendorPrefix([\"transform\", \"msTransform\", \"MozTransform\", \"WebkitTransform\", \"OTransform\"])\r\n  storage.setItem('amst_transitionPrefix', transitionPrefix)\r\n  storage.setItem('amst_transformPrefix', transformPrefix)\r\n}\r\n  \r\n\r\n/*DÉTECTECTION DES ECRANS TACTILES\r\n//https://developer.mozilla.org/en-US/docs/Web/API/Touch_events/Supporting_both_TouchEvent_and_MouseEvent#Event_order\r\nPour rappel, la séquence des évènements sur une surface tactile se présente comme suit :\r\n  - touchstart\r\n  - Zero or more touchmove events, depending on movement of the finger(s)\r\n  - touchend\r\n  - mousemove\r\n  - mousedown\r\n  - mouseup\r\n  - click.\r\nDonc, sur une surface tactile, touchstart sera déclenché avant mousemove\r\net si l'on détecte un mousemove, c'est bel et bien que l'on n'est pas sur tactile.\r\n\r\nPar défaut, l'interface graphique est orientée touchDevice.\r\nSi l'on constate que l'on est sur le dispositif de pointage n'est pas tactile,\r\non applique au container principal une class no-touch.\r\nCette class assure la prise en charge de la pseudo-class css :hover.\r\nPar ailleurs, elle opère une réduction de moitié des hauteurs de la barre temporelle \r\net du potentiomètre de volume (s'il est en mode horizontal)\r\nlorsque ces éléments ne sont pas survolés par le pointeur.\r\nDans cette configuration, le survol de la barre de lecture affiche la position temporelle\r\net l'éventuelle vignette correspondant à la position du pointeur au dessus de cette barre.\r\nDans la configuration tactile, c'est le slide horizontal qui assure cette fonctionnalité :\r\nl'information temporelle et la vignette sont alors affichées dans la partie supérieure de la vidéo.\r\n\r\nOn déclare donc une variable _pointerType et on lui affecte la valeur 'unknown'.\r\nOn pose un premier écouteur pour détecter un éventuel déplacement du pointeur\r\net un second sur l'évènement touchstart.\r\nSi on détecte un touchstart, on donne la valeur 'touch' à la variable _pointerType.\r\nSi on détecte un déplacement, on passe la valeur 'mouse' à _pointerType..\r\nAussitôt la détection effectuée, on stoppe les deux écouteurs initialement posés\r\net on transmet l'information aux éventuelles instances créées entretemps\r\n*/  \r\nlet _pointerType = 'unknown'\r\nif (storage && storage.getItem('amst_pointerType')) {\r\n  _pointerType = storage.getItem('amst_pointerType')\r\n} else{\r\n  const\r\n    testPointerMove = function(e){\r\n      _pointerType = (e.pointerType)?e.pointerType:'mouse'\r\n      cleanTestPointer()\r\n    },\r\n    testTouchStart = function(){\r\n      _pointerType = 'touch'\r\n      cleanTestPointer()\r\n    },\r\n    cleanTestPointer = function(){\r\n      storage.setItem('amst_pointerType', _pointerType)\r\n      w.removeEventListener(myPointerMove, testPointerMove)\r\n      w.removeEventListener('touchstart', testTouchStart)\r\n      if (AmstramgramVideoPlayer.players.length > 0) {\r\n        AmstramgramVideoPlayer.players.forEach(p=>p.container.dispatchEvent(new CustomEvent('pointerDetected')))\r\n      }\r\n    }\r\n  w.addEventListener(myPointerMove, testPointerMove, false)\r\n}\r\n\r\n//Détection du support de l'option passive sur les events\r\n//https://github.com/WICG/EventListenerOptions/blob/gh-pages/EventListenerOptions.polyfill.js\r\nlet _supportPassiveEvents = false\r\nif (storage && storage.getItem('amst_supportPassiveEvents')) {\r\n  _supportPassiveEvents = storage.getItem('amst_supportPassiveEvents')\r\n} else{\r\n  d.createElement(\"div\").addEventListener(\"test\", ()=>{}, {\r\n    get passive() {\r\n      _supportPassiveEvents = true\r\n      storage.setItem('amst_supportPassiveEvents', _supportPassiveEvents)\r\n      return false\r\n    }\r\n  })\r\n}\r\n\r\n\r\n/************************************************\r\n *                                              *\r\n *                 DÉBUT CLASS                  *\r\n *                                              *\r\n ************************************************/\r\nclass AmstramgramVideoPlayer {\r\n  /*Fonction statique permettant de redéfinir les options par défaut \r\n    Usage : \r\n      AmstramgramVideoPlayer.options({volume:0})\r\n      let player = new AmstramgramVideoPlayer(document.querySelector('video'))\r\n  */\r\n  static options(obj){\r\n    if (AmstramgramVideoPlayer.players.length == 0) AmstramgramVideoPlayer.defaultOptions = mergeDeep(AmstramgramVideoPlayer.defaultOptions, obj)\r\n  }\r\n\r\n  constructor(el, params) {\r\n/************************************************\r\n *                                              *\r\n *               RÉCUPÉRATION ET                *\r\n *          TRAITEMENT DES PARAMÈTRES           *\r\n *                                              *\r\n ************************************************/\r\n    /*\r\n      Récupération des attributs HTML éventuels de l'élément. \r\n      On ne retient que ceux qui nous intéressent, à savoir :\r\n      - autoplay\r\n      - crossorigin\r\n      - loop\r\n      - muted\r\n      - playsinline\r\n      - poster\r\n      - preload\r\n      - src\r\n\r\n\r\n    AmstramgramVideoPlayer.defaultOptions = {\r\n      autoplay: false,\r\n      crossorigin: 'anonymous',\r\n      download: {label:'Télécharger', disabled:false, hidden:false},\r\n      duration: 120,\r\n      format: 16/9,\r\n      fullscreen: {label:{enter:'Plein écran', exit:'Quitter le plein écran'}, disabled:false, hidden:false},\r\n      loop: false,\r\n      next: {label:'Suivant', disabled:true, hidden:true},\r\n      playsinline: true,\r\n      poster: undefined,\r\n      preload: 'none',\r\n      previous: {label:'Précédent', disabled:true, hidden:true},\r\n      skipTime: '1%',\r\n      thumbnails: {src:undefined, number:100},\r\n      volume: 0.8,\r\n      volumeButton: {label:{mute:'Désactiver le son', unmute:'Activer le son'}, disabled:false, hidden:false},\r\n      //Players properties\r\n      volumeGroup: 0,\r\n      hideControlsDelay: 5000,\r\n      videoVolumeOrientation: 'vertical',\r\n      railMinWidthForNormalUI: 600,\r\n      //Global properties\r\n      appLabel:'Lecteur Vidéo',\r\n      pauseLabel:'Pause',\r\n      playLabel:'Lecture',\r\n      volumeHelpLabel:'Utilisez les flèches Haut/Bas du clavier pour augmenter ou diminuer le volume.',\r\n      volumeSliderLabel:'Potentiomètre de volume',\r\n    }\r\n  */\r\n\r\n    //booleanAttributes = attributs de valeur vide. S'ils sont présents, le paramètre correspondant est passé à true.\r\n    //La propriété muted si elle est présente sera convertie en volume = 0\r\n    //Les 3 autres seront appliquées à l'élément construit\r\n    const booleanAttributes = ['autoplay', 'loop', 'muted', 'playsinline']\r\n    //Les autres attributs à récupérer :\r\n    let attributes = booleanAttributes.concat(['crossorigin', 'poster', 'preload', 'src'])\r\n    //https://davidwalsh.name/javascript-attributes#comment-511786\r\n    this.params = el.getAttributeNames().reduce((obj, name)=>{\r\n      if (attributes.includes(name)) {\r\n        //si l'attribut traité nous intéresse, on passe sa valeur au paramètre qui lui correspond.\r\n        obj[name] = booleanAttributes.includes(name)?true:el.getAttribute(name)\r\n      }\r\n      return obj;\r\n    }, {})\r\n    //Conversion de muted en volume nul\r\n    if (this.params.muted) {\r\n      this.params.volume = 0\r\n      delete this.params.muted\r\n    }\r\n    //Si les attributs width et height sont présents et ont un sens,\r\n    //on en déduit le format\r\n    if (parseInt(el.getAttribute('width')) > 0 && parseInt(el.getAttribute('height')) > 0) {\r\n      this.params.format = parseInt(el.getAttribute('width')) / parseInt(el.getAttribute('height'))\r\n    }\r\n    //On supprime muted de la liste des attributs à traiter\r\n    //On rajoute les propriétés susceptibles d'être passées lors de la création de l'instance\r\n    attributes = attributes.filter(param=>{return param != 'muted'}).concat(['download', 'duration', 'format', 'fullscreen', 'hideControlsDelay', 'next', 'previous', 'skipTime', 'thumbnails', 'videoVolumeOrientation', 'volume', 'volumeButton', 'volumeForced', 'volumeGroup', 'railMinWidthForNormalUI'])\r\n    //Si des paramètres ont été passés à l'instance, ils priment sur ceux qui sont définis par les attributs.\r\n    //On élimine toute propriété qui n'aurait rien à faire là en ne retenant que celles qui sont listées dans le tableau attributes\r\n    if (params) \r\n      params = Object\r\n        .keys(params)\r\n        .filter(key=>attributes.includes(key))\r\n        .reduce((res, key)=>(res[key] = params[key], res), {})\r\n    //On merge les paramètres de l'instance avec ceux de la page HTML\r\n    if (params) this.params = mergeDeep(this.params, params)\r\n    this.params = mergeDeep(AmstramgramVideoPlayer.defaultOptions, this.params)\r\n/************************************************\r\n *                                              *\r\n *             FIN RÉCUPÉRATION ET              *\r\n *          TRAITEMENT DES PARAMÈTRES           *\r\n *                                              *\r\n *          /////////////////////////           *\r\n *                                              *\r\n *             CONSTRUCTION HTML                *\r\n *                                              *\r\n ************************************************/\r\n    const \r\n      wrapper = d.createElement('div'),//Élément wrapper renfermant tous les éléments HTML du lecteur\r\n      //Si le paramètre d'orientation du potentiometre de volume est défini autrement que par la chaine 'horizontal', \r\n      //on fixe sa valeur à 'vertical'\r\n      videoVolumeOrientation = (this.params.videoVolumeOrientation=='horizontal')?'horizontal':'vertical',\r\n      passive = _supportPassiveEvents\r\n\r\n    //Construction des éléments HTML de l'UI en fonction des paramètres\r\n    wrapper.classList.add('amst__wrapper')  \r\n    wrapper.classList.add('amst__video')  \r\n    wrapper.innerHTML = buildUI(this.params)\r\n    //Insertion du wrapper dans le DOM\r\n    el.parentNode.insertBefore(wrapper, el)\r\n    //Pour éviter tout problème sous Androïd, on reset la source de l'élément original\r\n    //avant de le supprimer\r\n    el.removeAttribute('src')\r\n    el.parentNode.removeChild(el)\r\n    \r\n/************************************************\r\n *                                              *\r\n *             FIN CONSTRUCTION HTML            *\r\n *                                              *\r\n *          /////////////////////////           *\r\n *                                              *\r\n *          DÉCLARATIONS DES VARIABLES          *\r\n *                                              *\r\n ************************************************/\r\n    //Constantes\r\n    const \r\n      self = this,\r\n      $ = _$(wrapper),//Définition de la fonction $ : $('video') renvoie le premier élément HTML video contenu dans le wrapper\r\n      $$ = _$$(wrapper),//Définition de la fonction $$ : $$('.amst__layer') renvoie un tableau des éléments portant la classe amst__layer\r\n      media = this.media = $('video'),\r\n      container = this.container = $('.amst__container'),\r\n      layerPoster =  $('.amst__layer-poster'),\r\n      layerPosterCanvas =  $('.amst__layer-poster canvas'),\r\n      layerSeekingTouch = $('.amst__layer-seeking-touch'),\r\n      seekingTouch = $('.amst__seeking-touch'),\r\n      layerPlay = $('.amst__layer-play'),\r\n      layerLoading = $('.amst__layer-loading'),\r\n      controls = $('.amst__controls'),\r\n      controlsPadding = 2 * controls.css('padding-left'),\r\n      playPauseButton = $('.amst__playpause>button'),\r\n      rail = $('.amst__rail'),\r\n      slider = $('.amst__slider'),\r\n      handle = $('.amst__handle'),\r\n      timeCurrent = $('.amst__currenttime-bar'),\r\n      seeking = $('.amst__seeking'),\r\n      volumeButton = $('.amst__volumebutton button'),\r\n      volumeSlider = $('.amst__volume-slider')\r\n\r\n      \r\n    //Variables\r\n    let //Largeur du lecteur actualisée sur l'évènement resize \r\n        //et nécessaire pour positionner la vignette de preview sur tactile\r\n        playerWidth,\r\n        //Position et dimensions de l'élément volume recalculées lors d'un évènement resize ou scroll\r\n        volumeRect,\r\n        //Abscisse et largeur de l'élément slider recalculées lors d'un évènement resize ou scroll\r\n        sliderLeft, sliderWidth,\r\n        //Largeur cumulée des éléments visibles dans la barre de contrôle à l'exclusion du slider\r\n        //dont on peut déduire la largeur disponible pour le slider.\r\n        //LargeurDisponible = playerWidth - controlsElementsWidth - controlsPadding\r\n        //Si cette valeur est inférieure à celle donnée par l'option railMinWidthForNormalUI,\r\n        //on bascule vers l'interface réduite.\r\n        controlsElementsWidth,\r\n        timeoutGetControlsElementsWidth,\r\n        //Animation de la barre temporelle\r\n        updateTimeRailAnimation,\r\n        //Variable mise à jour sur l'évènement durationchange au cas où l'option skipTime ait été donnée en pourcentage.\r\n        //Elle retient la valeur du skip à effectuer exprimée en secondes\r\n        skipTime,\r\n        //Enregistre la position temporelle courante de la vidéo arrondie à la seconde inférieure.\r\n        //Le cas échéant, permet de relancer la lecture de la vidéo à l'endroit où elle a été\r\n        //stoppée par le lancement d'un autre lecteur.\r\n        floorCurrentTime = 0,\r\n        //Variable mise à jour sur l'événement timeupdate\r\n        //Provoque un reset de l'animation de la barre temporelle \r\n        //si elle diffère de plus d'une demi seconde de la position temporelle effective\r\n        prevCurrentTime = 0,\r\n        //Variable enregistrant la présence du pointeur sur les contrôles.\r\n        //Si true, on bloque la disparition de la barre de contrôle.\r\n        pointerOverControls = false,\r\n        //Stocke le buffer du média\r\n        //Si on détecte une différence entre buffered et media.buffered\r\n        //on reconstruit les zones rectangulaires qui mettent en évidence les parties chargées dans la barre temporelle.\r\n        buffered,\r\n        //Variable passée à true sur les événements seeking, waiting et loadeddata.\r\n        //Si true, on bloque la disparition de la barre de contrôle.\r\n        //Retourne à false sur les événements play, playing, seeked et canplay\r\n        isBuffering = false,\r\n        //setTimeout contrôlant la disparition de la barre de contrôle\r\n        hideControlsTimeOut,\r\n        //Largeur de l'élément seeking = $('.amst__seeking'), actualisée au premier mouvement de la souris sur la barre temporelle\r\n        //Necessaire pour positionner l'élément ainsi que son background\r\n        seekingWidth,\r\n        //Largeur de l'élément seekingTouch = $('.amst__seeking-touch'), actualisée au premier swipe horizontal sur la vidéo\r\n        //Necessaire pous positionner l'élément ainsi que son background\r\n        seekingTouchWidth,\r\n        //Largeur de la vignette déterminée après le chargement de l'image spécifiée \r\n        //en divisant la largeur de cette image par le nombre de vignettes déclaré en paramètre\r\n        thumbWidth = 0,\r\n        volumeBeforeMute\r\n\r\n\r\n/************************************************\r\n *                                              *\r\n *          FIN INSERTION DANS LE DOM           *\r\n *                                              *\r\n *          /////////////////////////           *\r\n *                                              *\r\n *                     PLAY                     *\r\n *                                              *\r\n ************************************************/\r\n    //Fonction déclenchée par l'évènement 'amstEvent__play' généré par la méthode publique play()\r\n    function _play(){\r\n      //https://developers.google.com/web/updates/2016/03/play-returns-promise\r\n      let playPromise = media.play()\r\n      if (playPromise) playPromise.catch(()=>_pause())\r\n      //Si une autre instance est en cours de lecture, on la reset\r\n      if (AmstramgramVideoPlayer.currentPlayer && AmstramgramVideoPlayer.currentPlayer != self) AmstramgramVideoPlayer.currentPlayer.reset()\r\n      //On déclare l'instance comme lecteur courant\r\n      AmstramgramVideoPlayer.currentPlayer = self\r\n      container.focus()\r\n      //Mise à jour du bouton\r\n      playPauseButton.setAttributes({\r\n        class: 'amst__pause',\r\n        title: self.params.pauseLabel,\r\n        'aria-label': self.params.pauseLabel\r\n      })\r\n      //On cache le layer comprenant le gros bouton play\r\n      layerPlay.classList.add('amst__hidden')\r\n      //On programme la disparition de la barre de controle\r\n      if (!pointerOverControls) _hideControls({detail:{delayed:true}})\r\n    }\r\n    //On écoute l'évènement 'amstEvent__play' généré par la méthode play()\r\n    container.on('amstEvent__play', _play, false)\r\n/************************************************\r\n *                                              *\r\n *                  FIN PLAY                    *\r\n *                                              *\r\n *          /////////////////////////           *\r\n *                                              *\r\n *                    PAUSE                     *\r\n *                                              *\r\n ************************************************/\r\n    //Fonction déclenchée par l'évènement 'amstEvent__pause' généré par la méthode publique pause()\r\n   function _pause(){\r\n      media.pause()\r\n      //Mise à jour du bouton\r\n      playPauseButton.setAttributes({\r\n        class: '',\r\n        title: self.params.playLabel,\r\n        'aria-label': self.params.playLabel\r\n      })\r\n      //On affiche le layer comprenant le gros bouton play\r\n      layerPlay.classList.remove('amst__hidden')\r\n      //On affiche la barre de contrôle.\r\n      _showControls()\r\n      container.focus()\r\n    }\r\n    //On écoute le custom event 'amstEvent__pause' généré par la méthode pause()\r\n    container.on('amstEvent__pause', _pause, false)\r\n/************************************************\r\n *                                              *\r\n *                  FIN PAUSE                   *\r\n *                                              *\r\n *          /////////////////////////           *\r\n *                                              *\r\n *                    RESET                     *\r\n *                                              *\r\n ************************************************/\r\n    function _reset(){\r\n      /*La fonction est appelée si une autre instance passe en lecture\r\n      et que le présent lecteur avait auparavant été lancé.\r\n      Elle assure le reset complet de la source et le passage de preload en none\r\n      de manière à éviter tout problème avec les dispositifs qui limitent le nombre\r\n      de préchargements de videos sur une même page (Androïd entre autres).\r\n      Pour simuler une pause, on enregistre l'image courante de la vidéo\r\n      et on l'affiche dans un canvas à la place du poster.\r\n      */\r\n      //Dimensionnement du canvas\r\n      layerPosterCanvas.width = media.videoWidth\r\n      layerPosterCanvas.height = media.videoHeight\r\n      //Copie de l'image dans le canvas\r\n      layerPosterCanvas.getContext('2d').drawImage(media, 0, 0, layerPosterCanvas.width, layerPosterCanvas.height)\r\n      //On affiche le layer-poster. Le poster qui constitue le background est caché par le canvas.\r\n      layerPoster.classList.remove('amst__hidden')\r\n      //On reset le lecteur\r\n      container.classList.remove('amst__loadedmetadata')\r\n      media.src = ''\r\n      media.preload = 'none'\r\n      media.src = self.params.src\r\n    }\r\n    //On écoute l'évènement 'amstEvent__' généré par la méthode reset()\r\n    container.on('amstEvent__', _reset, false)\r\n/************************************************\r\n *                                              *\r\n *                  FIN RESET                   *\r\n *                                              *\r\n *          /////////////////////////           *\r\n *                                              *\r\n *                HIDECONTROLS                  *\r\n *                                              *\r\n ************************************************/\r\n    /*Fonction déclenchée par le custom event 'amstEvent__hideControls' généré par la méthode publique hideControls()\r\n    @param {e} Custom Event\r\n    event.detail : \r\n      - delayed (boolean) - default false\r\n      - forced (boolean) - default false\r\n    Passé à true, delayed programme la disparition de la barre de controle \r\n    après un temps défini par l'option hideControlsDelay.\r\n    Passé à true, forced force la disparition de la barre de controle \r\n    alors même que la vidéo est en pause.\r\n    Il est uniquement employé sur les écrans tactiles lors du swipe horizontal \r\n    qui fait fonction de recherche.\r\n    La disparition avec délai se réalise via un bête setTimeout qui relance la fonction\r\n    elle même.\r\n    */\r\n    function _hideControls(e){\r\n      let delayed = e?e.detail.delayed:false,\r\n          forced = e?e.detail.forced:false\r\n      if (media.paused && !forced) {\r\n        //La barre de contrôle reste systématiquement visible\r\n        //à moins d'être sur tactile et que l'utilisateur opère un swipe horizontal\r\n        //pour se déplacer dans le temps.\r\n        return\r\n      } else if (delayed || isBuffering || pointerOverControls) {\r\n        //Si le paramètre delayed vaut true ou qu'un buffering est en cours\r\n        //ou que le pointeur est positionné sur la barre de contrôle :\r\n        //on annule l'éventuel timeout en cours et on en lance un nouveau\r\n        if (hideControlsTimeOut) clearTimeout(hideControlsTimeOut)\r\n        hideControlsTimeOut = setTimeout(()=>_hideControls(), self.params.hideControlsDelay)\r\n      } else {\r\n        //Sinon, on cache...\r\n        container.focus()\r\n        controls.style[transformPrefix] = 'translateX(-50%) scaleY(0)'\r\n      }\r\n    }\r\n    //On écoute le custom event 'amstEvent__hideControls' généré par la méthode hideControls()\r\n    container.on('amstEvent__hideControls', _hideControls, false)\r\n/************************************************\r\n *                                              *\r\n *              FIN HIDECONTROLS                *\r\n *                                              *\r\n *          /////////////////////////           *\r\n *                                              *\r\n *                SHOWCONTROLS                  *\r\n *                                              *\r\n ************************************************/\r\n    function _showControls(){\r\n      //On annule l'éventuelle programmation en cours\r\n      if (hideControlsTimeOut) clearTimeout(hideControlsTimeOut)\r\n      controls.style[transformPrefix] = ''\r\n      //Si la vidéo est en lecture, on programme la disparition de la barre\r\n      if (!media.paused) _hideControls({detail:{delayed:true}})\r\n    }\r\n    //On écoute l'évènement 'amstEvent__showControls' généré par la méthode showControls()\r\n    container.on('amstEvent__showControls', _showControls, false)\r\n/************************************************\r\n *                                              *\r\n *              FIN SHOWCONTROLS                *\r\n *                                              *\r\n *          /////////////////////////           *\r\n *                                              *\r\n *                UPDATEBUTTONS                 *\r\n *    MAJ PREVIOUS/NEXT/DOWNLOAD/FULLSCREEN     *\r\n *                                              *\r\n ************************************************/\r\n    /*\r\n    Chacun des boutons next, previous, download, volume et fullscreen peut être désactivé ou caché.\r\n    Par ailleurs, les boutons next, previous et download disposent d'un label configurable.\r\n    Les boutons fullscreen et volumeButton disposent eux de deux labels configurables\r\n    pour accompagner leur changement d'état éventuel (mute et unmute pour volumeButton, in et out pour fullscreen).\r\n    Les fonctions publiques previous(), next(), download(), fullscreen() et volumeButton() génèrent\r\n    chacunes un événement dédié qui déclenchent respectivement les fonctions \r\n    _previous(), _next(), _download(), _fullscreen() et _volumeButton(),\r\n    lesquelles assurent la mise à jour du bouton ciblé.\r\n    On prévoit deux variables pour les titres associés au bouton fullscreen\r\n    afin de pouvoir le mettre à jour lors des entrées/sorties du mode plein écran\r\n    */\r\n    let enterFullScreenLabel, exitFullScreenLabel\r\n    //On déclare une fonction getMovie pour réagir au click éventuel sur le bouton download.\r\n    //L'écouteur n'est placé que si le bouton porte en option les paramètres disabled:false et hidden:false.\r\n    //Dans les autres cas, il est retiré.\r\n    function getMovie(){\r\n      window.location = self.src.substring(0, self.src.lastIndexOf('/')) + '/index.php?file=' + self.src.substring(self.src.lastIndexOf('/') + 1)\r\n    }\r\n    /*\r\n    Mise à jour des class et attributs du bouton\r\n    name : nom du bouton\r\n    label : label du bouton\r\n    */\r\n    function updateButtonsAttributes(name, label){\r\n      const lowerCaseName = name.toLowerCase(),//pour volumeButton\r\n            buttonContainer = $(`.amst__${lowerCaseName}`), \r\n            button = $(`.amst__${lowerCaseName} > button`)\r\n      //Mise à jour de l'attribut HTML disabled en fonction de l'option disabled.\r\n      if (self.params[name].disabled === true) {\r\n        button.setAttribute('disabled','')\r\n      } else {\r\n        button.removeAttribute('disabled')\r\n      }\r\n      //Mise à jour de la class en fonction de l'option hidden.\r\n      if (self.params[name].hidden === true) {\r\n        buttonContainer.classList.add('amst__hidden')\r\n      } else {\r\n        buttonContainer.classList.remove('amst__hidden')\r\n      }\r\n      //On cache le potentiométre si le bouton de volume est disabled ou hidden.\r\n      if (name == 'volumeButton' && volumeSlider) {\r\n        if (self.params.volumeButton.disabled === true || self.params.volumeButton.hidden === true) {\r\n          volumeSlider.classList.add('amst__hidden')\r\n        } else {\r\n          volumeSlider.classList.remove('amst__hidden')\r\n        }\r\n      }\r\n\r\n      //Mis à jour du label\r\n      button.setAttributes({\r\n        title: label,\r\n        'aria-label': label\r\n      })\r\n      getControlsElementsWidth()\r\n    }\r\n    function updateAllButtons(){//Fonction appelée lors de la mise à jour de la source\r\n      _previous()\r\n      _next()\r\n      _download()\r\n      _volumeButton()\r\n      if (fullscreenAPI) _fullscreen()\r\n    }\r\n    function _previous(){\r\n      updateButtonsAttributes('previous', self.params.previous.label)\r\n    }\r\n    function _next(){\r\n      updateButtonsAttributes('next', self.params.next.label)\r\n    }\r\n    function _download() {\r\n      if (self.params.download.disabled === false && self.params.download.hidden === false) {\r\n        //On pose l'écouteur\r\n        $('.amst__download>button').on('click', getMovie, false)\r\n      } else {\r\n        //On retire l'écouteur\r\n        $('.amst__download>button').off('click', getMovie)\r\n      }\r\n      updateButtonsAttributes('download', self.params.download.label)\r\n    }\r\n    function _fullscreen(){\r\n      enterFullScreenLabel = self.params.fullscreen.label.enter\r\n      exitFullScreenLabel = self.params.fullscreen.label.exit\r\n      updateButtonsAttributes('fullscreen', (AmstramgramVideoPlayer.currentFullScreenPlayer==self)?exitFullScreenLabel:enterFullScreenLabel)\r\n    }\r\n    function _volumeButton(){\r\n      updateButtonsAttributes('volumeButton', (self.volume==0)?self.params.volumeButton.label.unmute:self.params.volumeButton.label.mute)\r\n    }\r\n    //On écoute les événements générés par les setters previous, next, download et fullscreen\r\n    container.on('amstEvent__previousButton', _previous, false)\r\n    container.on('amstEvent__nextButton', _next, false)\r\n    container.on('amstEvent__fullscreenButton', _fullscreen, false)\r\n    container.on('amstEvent__downloadButton', _download, false)\r\n    container.on('amstEvent__volumeButton', _volumeButton, false)\r\n/************************************************\r\n *                                              *\r\n *             FIN UPDATEBUTTONS                *\r\n *    MAJ PREVIOUS/NEXT/DOWNLOAD/FULLSCREEN     *\r\n *                                              *\r\n *          /////////////////////////           *\r\n *                                              *\r\n *                    SOURCE                    *\r\n *                                              *\r\n ************************************************/\r\n    function _src(e) {\r\n      let mySrc = e.detail\r\n      //Le cas échéant, on transforme  le paramètre passé au setter en objet\r\n      mySrc = (typeof mySrc === 'object')?mySrc:{src:mySrc}\r\n      if (mySrc.volumeGroup < 1) mySrc.volumeGroup = self.params.volumeGroup\r\n      if (!isNaN(mySrc.volume) && (mySrc.volumeForced === true || !storage.getItem(`amst_volumegroup${mySrc.volumeGroup}`))) {\r\n        //Si un volume a été spécifié et que \r\n        //l'option volumeForced est présente ou que le volumeGroup ne figure pas dans sessionStorage\r\n        self.params.volume = mySrc.volume\r\n        if (mySrc.volumeGroup > 0) storage.setItem(`amst_volumegroup${mySrc.volumeGroup}`, mySrc.volume)\r\n      } else if (storage.getItem(`amst_volumegroup${mySrc.volumeGroup}`)) {\r\n        self.params.volume = storage.getItem(`amst_volumegroup${mySrc.volumeGroup}`)\r\n      }\r\n      //On ne conserve dans mySrc que les propriétés relevantes. \r\n      const srcValidParameters = ['autoplay', 'crossorigin', 'download', 'duration', 'format', 'fullscreen', 'loop', 'next', 'playsinline', 'poster', 'preload', 'previous', 'src', 'skipTime', 'thumbnails', 'volumeButton', 'volumeGroup']\r\n      mySrc = srcValidParameters.reduce((obj, name)=>{\r\n        if (srcValidParameters.includes(name) && mySrc[name] != undefined) {\r\n          obj[name] = mySrc[name]\r\n        }\r\n        return obj;\r\n      }, {})\r\n      //S'il s'agit d'un changement de source\r\n      if (media.getAttribute('src')) {\r\n        //On reset le player\r\n        self.pause()\r\n        prevCurrentTime = 0\r\n        floorCurrentTime = 0\r\n        buffered = undefined\r\n        //On supprime l'ensemble des attributs HTML présents dans le tag <video>\r\n        while (media.attributes.length > 0) media.removeAttribute(media.attributes[0].name)\r\n        //Reset des paramètres autoplay, crossorigin, loop, playsinline, thumnails\r\n        const arr = ['autoplay', 'crossorigin', 'loop', 'playsinline', 'thumbnails']\r\n        arr.forEach(p=>self.params[p] = AmstramgramVideoPlayer.defaultOptions[p])\r\n        //Reset des class sur le container\r\n        container.classList.remove('amst__thumbnails','amst__loadedmetadata')\r\n        //Reset des vignettes\r\n        thumbWidth = 0\r\n        seekingWidth = undefined\r\n        seeking.removeAttribute('style')\r\n        seekingTouchWidth = undefined\r\n        seekingTouch.removeAttribute('style')\r\n        //Mise à jour des paramètres de l'instance.\r\n        for (let [key, value] of Object.entries(mySrc)) {\r\n          self.params[key] = value\r\n        }\r\n      }\r\n      //Le cas échéant, on charge l'image contenant les vignettes\r\n      if (self.params.thumbnails.src) {\r\n        let thumb = new Image()\r\n        const thumbEvent = function(e){\r\n          thumb.removeEventListener('load', thumbEvent)\r\n          thumb.removeEventListener('error', thumbEvent)\r\n          if (e.type == 'load') {\r\n            //Si la source de l'image est valide\r\n            container.classList.add('amst__thumbnails')\r\n            //On détermine la largeur des vignettes\r\n            thumbWidth = thumb.naturalWidth/self.params.thumbnails.number\r\n            //On applique le style résultant aux éléments seeking et et seekingTouch\r\n            let css = {width: `${thumb.naturalWidth/self.params.thumbnails.number}px`, height: `${thumb.naturalHeight}px`, 'background-image':`url(\"${self.params.thumbnails.src}\")`}\r\n            seeking.css(css)\r\n            seekingTouch.css(css)\r\n          } else {\r\n            self.params.thumbnails.src = undefined\r\n          }\r\n        }\r\n        thumb.addEventListener('error', thumbEvent, false)\r\n        thumb.addEventListener('load', thumbEvent, false)\r\n        thumb.src = self.params.thumbnails.src\r\n      }\r\n      //Initialisation/Mise à jour des attributs du tag video\r\n      let attributes = {\r\n        src: self.params.src,\r\n        preload: (IS_MOBILE)?'none':self.params.preload\r\n      }\r\n      if (self.params.playsinline === true) {\r\n        attributes.playsinline = '',\r\n        attributes['webkit-playsinline'] = ''\r\n      }\r\n      if (self.params.loop === true) {\r\n        attributes.loop = ''\r\n      }\r\n      if (self.params.crossorigin) {\r\n        attributes.crossorigin = self.params.crossorigin\r\n      }\r\n      media.setAttributes(attributes)\r\n      //Initialisation/Mise à jour du volume\r\n      self.volume = (IS_MOBILE && self.params.volume > 0)?1:self.params.volume\r\n      if (!volumeBeforeMute) {\r\n        volumeBeforeMute = (media.volume == 0)?0.1:media.volume\r\n        if (IS_MOBILE) volumeBeforeMute = 1\r\n      }\r\n      //Initialisation/Mise à jour du format\r\n      container.style.paddingBottom = 1 / self.params.format * 100 + '%'\r\n      //Initialisation/Mise à jour du poster\r\n      if (self.params.poster) {\r\n        layerPoster.style.backgroundImage = `url(\"${self.params.poster}\")`\r\n        layerPoster.classList.remove('amst__hidden')\r\n      }\r\n      //Initialisation/Mise à jour des informations temporelles\r\n      $('.amst__duration').innerHTML = secondsToTimeCode(self.params.duration)\r\n      $('.amst__currenttime').innerHTML = secondsToTimeCode(0, (self.params.duration > 3600));\r\n      //Mise à jour des boutons\r\n      updateAllButtons()\r\n      //Si autoplay, on lance la lecture\r\n      if (self.params.autoplay === true) {\r\n        _play()\r\n      }\r\n    }\r\n    //On écoute le custom event 'amstEvent__src' généré par la méthode src()\r\n    container.on('amstEvent__src', _src, false)\r\n    //Initialisation de la source\r\n    _src({detail:this.params})\r\n/************************************************\r\n *                                              *\r\n *                  FIN SOURCE                  *\r\n *                                              *\r\n *          /////////////////////////           *\r\n *                                              *\r\n *               ÉVÈNEMENTS MEDIA               *\r\n *                                              *\r\n ************************************************/\r\n    media\r\n      .on('mousemove', ()=>_showControls(), passive?{passive:true}:false)\r\n      .on('loadedmetadata', ()=>{\r\n        let myFormat = this.params.format = media.videoWidth / media.videoHeight\r\n        //Actualisation de la taille du container en fonction du format réel de la vidéo\r\n        if (AmstramgramVideoPlayer.currentFullScreenPlayer == self) {\r\n          w.dispatchEvent(new CustomEvent('optimizedResize'))\r\n        } else {\r\n          container.style.paddingBottom = 1 / myFormat * 100 + '%'\r\n        }\r\n        container.classList.add('amst__loadedmetadata')\r\n        //Si le lecteur a été reseté du fait du lancement d'un autre lecteur\r\n        //on replace la tête de lecture au temps où elle s'était arrétée\r\n        media.currentTime = floorCurrentTime\r\n      })\r\n      .on('loadeddata', ()=>{\r\n        //Pour iOS sur reset du player\r\n        media.currentTime = floorCurrentTime\r\n      })\r\n      .on('durationchange', ()=>{\r\n        this.params.duration = media.duration\r\n        //Mise à jour de skipTime\r\n        skipTime = (typeof(this.params.skipTime)=='string' && this.params.skipTime.slice(-1)=='%')?parseFloat(this.params.skipTime) * media.duration / 100:parseFloat(this.params.skipTime)\r\n        //Mise à jour des champs indicateurs de temps\r\n        if (media.duration >= 3600) {//Si la durée du media est supérieure à 1 heure\r\n          //La classe amst__long augmente la largeur des containers indicateurs de temps\r\n          container.classList.add('amst__long')\r\n        } else {\r\n          container.classList.remove('amst__long')\r\n        }\r\n        slider.setAttribute('aria-valuemax', media.duration)\r\n        $('.amst__duration').innerHTML = secondsToTimeCode(media.duration)\r\n        $('.amst__currenttime').innerHTML = secondsToTimeCode(floorCurrentTime, (media.duration > 3600))\r\n        //On reprend une mesure des contrôles au cas où le container ait gagné ou perdu la class amst__long \r\n        getControlsElementsWidth()\r\n      })\r\n      .on('progress', updateBuffer)//Mise à jour du canvas indicateur de buffering\r\n      .on('timeupdate', ()=>{\r\n        //L'évènement est aussi déclenché lorsqu'on reset la source du media,\r\n        //ce qui se produit au reset du player effectué suite au lancement de la lecture d'un autre player.\r\n        //Dans ce cas, la propriété duration du media n'est pas définie.\r\n        if (isNaN(media.duration)) return\r\n        updateBuffer()//Mise à jour du canvas indicateur de buffering\r\n        slider.setAttribute('aria-valuenow', media.currentTime)\r\n        let mediaFloorCurrentTime = Math.floor(media.currentTime)\r\n        if (floorCurrentTime != mediaFloorCurrentTime) {\r\n          //On n'actualise le champs indicateur du temps courant que si nécessaire\r\n          //c'est à dire si l'arrondi à la seconde du temps courant diffère de celui qu'on a précédemment pris soin d'enregistrer\r\n          floorCurrentTime = mediaFloorCurrentTime\r\n          let time = secondsToTimeCode(floorCurrentTime, (media.duration > 3600))\r\n          $('.amst__currenttime').innerHTML = time\r\n          slider.setAttribute('aria-valuetext', time)\r\n        }\r\n        if (prevCurrentTime == 0 || Math.abs(media.currentTime - prevCurrentTime) > 0.5) {\r\n          cancelAnimationFrame(updateTimeRailAnimation)\r\n          updateTimeRail()\r\n        }\r\n        prevCurrentTime = media.currentTime\r\n      })\r\n      .on('ended', ()=>{\r\n        media.currentTime = 0\r\n        this.pause()\r\n      })\r\n      .on('pause', ()=>cancelAnimationFrame(updateTimeRailAnimation))\r\n      .on('playing', ()=>{\r\n        //On force la fonction updateTimeRail en passant prevCurrentTime à 0.\r\n        prevCurrentTime = 0\r\n        layerPoster.classList.add('amst__hidden')\r\n      })\r\n      .on('seeked', ()=>{\r\n        //L'évènement est ausssi déclenché à la suite de l'évènement ended.\r\n        //Dans ce cas, currentTime vaut 0, la vidéo est en pause et on affiche le poster\r\n        if (floorCurrentTime == 0 && this.paused) {\r\n          layerPosterCanvas.width = 0\r\n          layerPosterCanvas.height = 0\r\n          layerPoster.classList.remove('amst__hidden')\r\n        }\r\n      })\r\n      .on('play playing seeked canplay', ()=>{\r\n        isBuffering = false\r\n        container.classList.remove('amst__buffering')\r\n      })\r\n      .on('seeking waiting loadeddata', ()=>{\r\n        isBuffering = true\r\n        container.classList.add('amst__buffering')\r\n      })\r\n/************************************************\r\n *                                              *\r\n *             FIN ÉVÈNEMENTS MEDIA             *\r\n *                                              *\r\n *          /////////////////////////           *\r\n *                                              *\r\n *                 UPDATEBUFFER                 *\r\n *                                              *\r\n ************************************************/\r\n    //Initialisation du canvas indicateur de buffering\r\n    const loadedBar = $('.amst__loaded-bar'),\r\n          loadedBarHeight = loadedBar.offsetHeight\r\n    let ctxLoadedBar = loadedBar.getContext('2d')\r\n    loadedBar.height = loadedBarHeight\r\n    ctxLoadedBar.fillStyle = loadedBar.css('color')\r\n    //Mise à jour du canvas indicateur de buffering appelée sur les évènements progress et timeupdate\r\n    function updateBuffer(){\r\n      //Comparaison de deux objets TimeRanges\r\n      function compareTimeRanges(t1, t2){\r\n        if (!t1 || !t2 || t1.length != t2.length) {\r\n          //Si l'un des objets n'existe pas ou si leurs longueurs diffèrent, on renvoie false\r\n          return false\r\n        } else {\r\n          for (let i = 0; i < t1.length; i++) {\r\n            //Comparaison de chacun des éléments contenus dans les TimeRanges\r\n            //Si on trouve une différence, on arrete et on renvoie false\r\n            if (t1.start(i) != t2.start(i) || t1.end(i) != t2.end(i)) {\r\n              i = t1.length\r\n              return false\r\n            }\r\n          }\r\n        }\r\n        return true\r\n      }\r\n      //Si le timeRanges renvoyé par la propriété buffered du média est différent de celui déjà enregistré\r\n      //On actualise le canvas indicateur de buffering\r\n      if (!compareTimeRanges(media.buffered, buffered)) {\r\n        ctxLoadedBar.clearRect(0, 0, loadedBar.width, loadedBar.height)\r\n        let inc = loadedBar.width / media.duration\r\n        for (let i = 0; i < media.buffered.length; i++) {\r\n          let start = media.buffered.start(i) * inc,\r\n              width = (media.buffered.end(i) * inc) - start\r\n          new AmstRoundedRect(ctxLoadedBar, loadedBarHeight, start, width)\r\n        }\r\n        buffered = media.buffered\r\n      }\r\n    }\r\n/************************************************\r\n *                                              *\r\n *              FIN UPDATEBUFFER                *\r\n *                                              *\r\n *          /////////////////////////           *\r\n *                                              *\r\n *               UPDATETIMERAIL                 *\r\n *                                              *\r\n ************************************************/\r\n    //On fixe le scaleX de timeCurrent à la valeur correspondant au ratio : currentTime/duration\r\n    //Pour handle, on réalise l'opération équivalente en jouant sur la valeur de son translateX.\r\n    //Si le media est en lecture, on réitère l'opération via un requestAnimationFrame\r\n    //On enregistre le rayon de handle\r\n    let handleRadius = 0.5 * handle.offsetWidth\r\n    function updateTimeRail(){\r\n      let trans = (media.paused && !media.seeking)?'all .15s ease-in':'none',\r\n          t = media.currentTime,\r\n          T = media.duration,\r\n          //Si la source change, media.duration risque de ne pas être définie.\r\n          //Dans ce cas, ratio vaut 0\r\n          ratio = isNaN(T)?0:(t / T).toFixed(4),\r\n          translate = (ratio * sliderWidth) - handleRadius\r\n      translate = Math.max(translate, 0)\r\n      translate = Math.min(translate, sliderWidth - 2 * handleRadius) + 'px'\r\n      if (media.paused) {\r\n        //Mise à jour de timeCurrent\r\n        timeCurrent.css({[transitionPrefix]:trans, [transformPrefix]:`scaleX(${ratio})`})\r\n        //Mise à jour de handle\r\n        handle.css({[transitionPrefix]:trans, [transformPrefix]:`translateX(${translate})`})\r\n      } else {\r\n        //Mise à jour de timeCurrent\r\n        timeCurrent.css({[transitionPrefix]:trans, [transformPrefix]:`scaleX(${ratio})`})\r\n        //Mise à jour de handle\r\n        handle.css({[transitionPrefix]:trans, [transformPrefix]:`translateX(${translate})`})\r\n        updateTimeRailAnimation = requestAnimationFrame(updateTimeRail)\r\n      }\r\n    }\r\n/************************************************\r\n *                                              *\r\n *             FIN UPDATETIMERAIL               *\r\n *                                              *\r\n *          /////////////////////////           *\r\n *                                              *\r\n *         ÉVTS TACTILES SUR LA VIDÉO           *\r\n *                                              *\r\n ************************************************/\r\n    /*\r\n    À la suite d'un évènement 'touchstart', on place un écouteur sur l'évènement 'touchend'\r\n    Cet écouteur est retiré si un évènement touchmove est déclenché.\r\n    Si la vidéo est en pause :\r\n      - on affiche le gros bouton Play au centre et la barre de contrôle.\r\n      - un tap passe la vidéo en lecture, le gros bouton Play est caché \r\n          et la barre de contrôle disparait au bout d'un temps défini par l'option hideControlsDelay.\r\n      - un slide horizontal affiche le seeking et, le cas échéant, la vignette \r\n          mais fait disparaitre la barre de controle.\r\n          Celle-ci réapparait à la fin du slide, la vidéo reste en pause et sa tête de lecture est positionnée\r\n          au temps correspondant à l'endroit où le slide a cessé.\r\n    Si la vidéo est en lecture :\r\n      - un tap passe la vidéo en pause et on affiche le gros bouton Play ainsi que la barre de contrôle.\r\n      - si la barre de contrôle est apparente, un slide vertical vers le bas la fait disparaitre.\r\n      - si la barre de contrôle est cachée, un slide vertical vers le haut la fait apparaitre.\r\n      - un slide horizontal affiche le seeking et, le cas échéant, la vignette. Si elle est apparente, la barre de contrôle est cachée.\r\n          À la fin du slide, la lecture reprend au temps correspondant à l'endroit où le slide a cessé.\r\n    */\r\n    $$([media, layerLoading, layerSeekingTouch, layerPlay])\r\n      .on('touchstart', function(e){\r\n        const target = $(e.target),\r\n              startTime = new Date().getTime(),\r\n              //Durée maximale, exprimée en ms, comprise entre touchstart et touchend pour que \r\n              //l'évènement résultant soit considéré comme un click si aucun touchmove n'a été détecté.\r\n              maxDelay = 800,\r\n              //Position temporelle exprimée en pourcentage par rapport à la durée du média\r\n              timeRatio = (media.duration)?media.currentTime/media.duration:undefined\r\n        let startX = e.changedTouches[0].pageX,//Abscisse de l'évènement\r\n            startY = e.changedTouches[0].pageY,//Ordonnée de l'évènement\r\n            distX = 0,//Variable destinée à stocker la distance parcourue sur l'axe X\r\n            distY = 0,//Variable destinée à stocker la distance parcourue sur l'axe Y\r\n            //Variable incrémentée d'un pas à chaque fois qu'on détecte un déplacement horizontal\r\n            //et décrémentée d'un pas à chaque fois qu'on détecte un déplacement vertical\r\n            horizontalMove = 0,\r\n            seekingRatio = undefined,//Variable définie uniquement dans le cas d'un déplacement horizontal\r\n            toggleControls = false//Variable passant à true s'il s'agit d'un déplacement vertical\r\n        target.on('touchend', touchEnd, passive?{passive:true}:false)\r\n        target.on('touchmove', touchMove, passive?{passive:false}:false)\r\n        function touchMove(e){\r\n          //Si la vidéo n'est pas chargée et n'a donc pas de durée définie\r\n          //Ou si la vidéo est en pause et qu'on a détecté un swipe vertical,\r\n          //on ne fait rien.\r\n          //Ainsi, s'il s'agit d'un swipe vertical, on ne bloque pas le scroll.\r\n          if (!media.duration || (self.paused && horizontalMove < -5)) return\r\n          //Dans tous les autres case, on bloque le scroll éventuel.\r\n          e.preventDefault()\r\n          //Mesure des distances\r\n          distX = e.changedTouches[0].pageX - startX\r\n          distY = e.changedTouches[0].pageY - startY\r\n          //Mise à jour de horizontalMove en fonction du mouvement détecté\r\n          if (Math.abs(distX) > Math.abs(distY)) {//Horizontal\r\n            horizontalMove ++\r\n          } else {//Vertical\r\n            horizontalMove --\r\n          }\r\n          if (horizontalMove >= 5) {//Si le mouvement horizontal se confirme\r\n            seekingRatio = Math.min(Math.max(timeRatio + (distX / playerWidth),0),0.999)\r\n            if (!seekingTouchWidth) seekingTouchWidth = seekingTouch.offsetWidth\r\n            const translate = Math.min(Math.max(seekingRatio * playerWidth - 0.5 * seekingTouchWidth, 0), playerWidth - seekingTouchWidth) + 'px'\r\n            let css = {[transformPrefix]:`translateX(${translate})`}\r\n            if (self.params.thumbnails.src) {\r\n              css['backgroundPosition'] = - Math.floor(seekingRatio * 100) * thumbWidth + 'px 0'\r\n            }\r\n            seekingTouch.css(css)\r\n            $('.amst__seeking-touch-cache').style[transformPrefix] = `scaleX(${seekingRatio})`\r\n            $('.amst__seeking-touch > span').innerHTML = secondsToTimeCode(media.duration * seekingRatio, (media.duration > 3600))\r\n            if (horizontalMove == 5) {\r\n              //On affiche le layer seeking\r\n              layerSeekingTouch.classList.add('amst__show')\r\n              //on cache la barre de contrôle sans délai et ce même si la vidéo est en pause\r\n              _hideControls({detail:{delayed: false, forced:true}})\r\n            }\r\n          }\r\n          if (-5 == horizontalMove) {//Si le mouvement vertical se confirme\r\n            toggleControls = true\r\n            if (distY < 0) {\r\n              _showControls()\r\n            } else {\r\n              _hideControls()\r\n            }\r\n          }\r\n        }\r\n        function touchEnd(){\r\n          if (seekingRatio != undefined) {//Si seeking et donc swipe horizontal\r\n            //On place la tête de lecture au temps résultant\r\n            media.currentTime = media.duration * seekingRatio\r\n            //On cache le layer seeking\r\n            layerSeekingTouch.classList.remove('amst__show')\r\n            _showControls()\r\n          } else if (!toggleControls) {//Si aucun mouvement n'a été détecté\r\n            //Si le touchend intervient avant le délai maximum défini par maxDelay\r\n            if (maxDelay > new Date().getTime() - startTime) {\r\n              //On bascule entre pause et lecture\r\n              self.togglePlayPause()\r\n            } /*else { TODO : afficher le menu contextuel\r\n              showMenu()\r\n            }*/\r\n          }\r\n          target.off('touchend', touchEnd)\r\n          target.off('touchmove', touchMove)\r\n        }\r\n      }, passive?{passive:false}:false)\r\n/************************************************\r\n *                                              *\r\n *        FIN ÉVTS TACTILES SUR LA VIDÉO        *\r\n *                                              *\r\n *          /////////////////////////           *\r\n *                                              *\r\n *                ÉVTS GÉNÉRAUX                 *\r\n *                                              *\r\n ************************************************/\r\n    //Si l'on est pas sur un écran tactile, un click sur la vidéo passe celle-ci en pause\r\n    //même si un buffering est en cours.\r\n    $$([media, layerLoading]).on('click', ()=>this.pause(), false)\r\n    //Tout évènement souris provoque l'ajout de la classe 'keyboard-inactive' au container\r\n    //Cette classe empêche l'affichage d'une bordure sur les éléments qui ont le focus\r\n    container.on('touchstart mousedown', ()=>{container.classList.remove('amst__keyboard-active')}, passive?{passive:true}:false)\r\n    // Un click sur le bouton Play/Pause déclenche une bascule Play/Pause   \r\n    $('.amst__playpause').on('click', ()=>this.togglePlayPause())\r\n    //Un click sur le gros bouton Play au centre de la vidéo déclenche une lecture \r\n    layerPlay.on('click', ()=>this.play())\r\n/************************************************\r\n *                                              *\r\n *               FIN ÉVTS GÉNÉRAUX              *\r\n *                                              *\r\n *          /////////////////////////           *\r\n *                                              *\r\n *         AFFICHER/CACHER LES CONTRÔLES        *\r\n *                                              *\r\n ************************************************/\r\n    //Si le pointeur est sur la barre de contrôle, on bloque la disparition de la barre\r\n    //S'il sort de la zone, on rétablit la disparition\r\n    //Rien ne se passe si l'on est sur tactile\r\n    controls\r\n      .on(myPointerEnter, (e)=>{\r\n        if (myPointerType == 'touch' || (e.pointerType && e.pointerType == 'touch')) return false\r\n        _showControls()\r\n        pointerOverControls = true\r\n      })\r\n      .on(myPointerLeave, (e)=>{\r\n        if (myPointerType == 'touch' || (e.pointerType && e.pointerType == 'touch')) return false\r\n        pointerOverControls = false\r\n        _hideControls({detail:{delayed:true}})\r\n      })\r\n/************************************************\r\n *                                              *\r\n *      FIN AFFICHER/CACHER LES CONTRÔLES       *\r\n *                                              *\r\n *          /////////////////////////           *\r\n *                                              *\r\n *             ÉVÉNEMENTS SUR RAIL              *\r\n *                                              *\r\n ************************************************/\r\n    /*\r\n    Afin de faciliter la vie du visiteur, le rail dispose d'une hauteur de 35px.\r\n    Un clic ou un move amène le curseur à la position de l'évènement\r\n    et la tête de lecture de vidéo au temps correspondant.\r\n    On pose un écouteur sur l'évènement myPointerDown qui correspond à mousedown sur desktop\r\n    et à touchstart sur tactile.\r\n    */\r\n    rail.on(myPointerDown, ()=>{\r\n      //Si la vidéo n'est pas chargée, on abandonne...\r\n      if (isNaN(media.duration)) return false\r\n      //Sinon, on pose un écouteur sur l'évènement myPointerMove (mousemove/touchmove)\r\n      //et un autre sur myPointerUp (mouseup/touchend) et mypointerLeave (mouseleave)\r\n      rail.on(myPointerMove, moveHandle, passive?{passive:true}:false)\r\n      rail.on(myPointerUp + ' ' +  myPointerLeave, cleanTimeSliderMoveEvents, false)\r\n    }, passive?{passive:true}:false)\r\n    function moveHandle(e) {\r\n      //On détermine l'abscisse de la position où l'évènement se produit\r\n      //et on en déduit la position temporelle résultante de la tête de lecture\r\n      let eventX = (e.changedTouches)?e.changedTouches[0].clientX:e.clientX,\r\n          x = eventX - sliderLeft,\r\n          translate = x / sliderWidth\r\n      media.currentTime = translate * media.duration\r\n    }\r\n    function cleanTimeSliderMoveEvents(e){\r\n      //Si la vidéo n'est pas en pause et que le pointeur ne survole plus la barre de contrôle,\r\n      //on programme la disparition de ladite barre.\r\n      if (!self.paused && !pointerOverControls) _hideControls({detail:{delayed:true}})\r\n      //On opère le déplacement de la tête de lecture ce qui provoque celui du curseur\r\n      moveHandle(e)\r\n      //On retire les écouteurs.\r\n      rail.off(myPointerMove, moveHandle)\r\n      rail.off(myPointerUp + ' ' +  myPointerLeave, cleanTimeSliderMoveEvents)\r\n    }\r\n/************************************************\r\n *                                              *\r\n *           FIN ÉVÉNEMENTS SUR RAIL            *\r\n *                                              *\r\n *          /////////////////////////           *\r\n *                                              *\r\n *         ÉVÉNEMENTS SOURIS SUR SLIDER         *\r\n *                                              *\r\n ************************************************/\r\n    //Lorsque la souris survole la barre de lecture, on fait apparaître le curseur\r\n    //indiquant la position temporelle correspondante ainsi que la vignette si thumbnails.src est défini.\r\n    throttle(myPointerMove, 'optimizedPointerMove', slider)\r\n    //L'élément seeking se déplace avec le pointeur et on actualise son contenu affiché en conséquence\r\n    slider.on('optimizedPointerMove', (e)=>{\r\n      //Si l'évènement est de source tactile ou que la vidéo n'est pas chargée, on l'ignore\r\n      if (myPointerType == 'touch' || (e.pointerType && e.pointerType == 'touch') || isNaN(media.duration)) return false\r\n      //Si la largeur de l'élément seeking n'a pas encore été déterminée,\r\n      //on initialise la variable seekingWidth\r\n      if (!seekingWidth) seekingWidth = seeking.offsetWidth\r\n      let seekingWrapperPosition = e.detail.clientX - sliderLeft\r\n      const seekingRatio = seekingWrapperPosition / sliderWidth,\r\n            thumbBackgroundPosition = - Math.floor(seekingRatio * 100) * thumbWidth + 'px',\r\n            seekingWrapperHalfWidth = 0.5 * seekingWidth - 6\r\n      if (self.params.thumbnails.src) seeking.style.backgroundPosition = thumbBackgroundPosition + ' 0'\r\n      $('.amst__cursor').style[transformPrefix] = `translateX(${seekingWrapperPosition}px)`\r\n      //On fait en sorte que le wrapper ne déborde pas aux extrémités de la barre temporelle\r\n      seekingWrapperPosition = Math.max(seekingWrapperPosition, seekingWrapperHalfWidth)\r\n      seekingWrapperPosition = Math.min(seekingWrapperPosition, sliderWidth - seekingWrapperHalfWidth)\r\n      $('.amst__seeking-wrapper').style[transformPrefix] = `translateX(${seekingWrapperPosition}px)`\r\n      $('.amst__seeking > span').innerHTML = secondsToTimeCode(seekingRatio * media.duration, (media.duration > 3600))\r\n    })\r\n/************************************************\r\n *                                              *\r\n *            FIN SOURIS SUR SLIDER             *\r\n *                                              *\r\n *          /////////////////////////           *\r\n *                                              *\r\n *                 VOLUMECHANGE                 *\r\n *                                              *\r\n ************************************************/\r\n    media.on('volumechange', ()=>{\r\n      if (!IS_MOBILE) {\r\n        const vol = parseInt(media.volume * 100)\r\n        volumeSlider.setAttributes({\r\n          'aria-valuenow': vol,\r\n          'aria-valuetext': vol + '%',\r\n        })\r\n        if (videoVolumeOrientation == 'horizontal') {\r\n          $('.amst__volume-current').style.width = vol + '%'\r\n        } else {\r\n          $('.amst__volume-handle').style.bottom = vol + '%'\r\n        }\r\n      }\r\n      //Mise à jour en cas de mute/demute\r\n      if (media.volume == 0) {\r\n        media.muted = true\r\n        volumeButton.setAttributes({\r\n          title: self.params.volumeButton.label.unmute,\r\n          'aria-label': self.params.volumeButton.label.unmute,\r\n          class: 'amst__unmute'\r\n        })\r\n      } else {\r\n        media.muted = false\r\n        volumeBeforeMute = media.volume\r\n        if (volumeButton.classList.contains('amst__unmute')) {\r\n          volumeButton.removeAttribute('class')\r\n          volumeButton.setAttributes({\r\n            title: self.params.volumeButton.label.mute,\r\n            'aria-label': self.params.volumeButton.label.mute,\r\n          })\r\n        }\r\n      }\r\n      //Stockage du volume pour le groupe correspondant\r\n      if (storage && self.params.volumeGroup > 0) {\r\n        storage.setItem(`amst_volumegroup${self.params.volumeGroup}`, self.volume)\r\n      }\r\n      self.params.volume = self.volume\r\n      //Propagation du changement de volume au éventuels autres players du même volumeGroup\r\n      if (self.params.volumeGroup > 0 && AmstramgramVideoPlayer.players.length > 1) {\r\n        AmstramgramVideoPlayer.players.forEach((player)=>{\r\n          if (player != self && player.params.volumeGroup == self.params.volumeGroup && player.volume != self.volume) {\r\n            player.volume = self.volume\r\n          }\r\n        })\r\n      }\r\n    })\r\n/************************************************\r\n *                                              *\r\n *              FIN VOLUMECHANGE                *\r\n *                                              *\r\n *          /////////////////////////           *\r\n *                                              *\r\n *             VOLUME CLICK SUR HP              *\r\n *                                              *\r\n ************************************************/\r\n    volumeButton.on('click', ()=>{\r\n      if (media.muted) {\r\n        media.volume = volumeBeforeMute\r\n        media.muted = false\r\n      } else {\r\n        media.volume = 0\r\n        media.muted = true\r\n      }\r\n    })\r\n/************************************************\r\n *                                              *\r\n *           FIN VOLUME CLICK SUR HP            *\r\n *                                              *\r\n *          /////////////////////////           *\r\n *                                              *\r\n *   VOLUME POTENTIOMÈTRE - SOURIS & CLAVIER    *\r\n *                                              *\r\n ************************************************/\r\n    if (!IS_MOBILE) {\r\n      volumeSlider.on(myPointerDown,()=>{\r\n        volumeSlider\r\n          .on(myPointerMove, updateVolume)\r\n          .on(myPointerLeave, cleanVolumeEvents)\r\n          .on(myPointerUp, updateVolume)\r\n          .on(myPointerUp, cleanVolumeEvents)\r\n      })\r\n      const updateVolume = function(e){\r\n        let ratio\r\n        if (videoVolumeOrientation == 'horizontal') {\r\n          ratio = Math.max(0, e.clientX - volumeRect.left)\r\n          ratio =  ratio / volumeRect.width\r\n          ratio = (ratio > 0.96)?1:ratio\r\n        } else {\r\n          volumeSlider.style.cursor = 'ns-resize'\r\n          ratio = volumeRect.height - e.clientY + volumeRect.top\r\n          ratio = Math.max(0 ,Math.min(ratio, 100)) / 100\r\n        }\r\n        self.volume = ratio\r\n      }\r\n      const cleanVolumeEvents = function(){\r\n        volumeSlider\r\n          .off(myPointerMove, updateVolume)\r\n          .off(myPointerLeave, cleanVolumeEvents)\r\n          .off(myPointerUp, updateVolume)\r\n          .off(myPointerUp, cleanVolumeEvents)\r\n        if (videoVolumeOrientation == 'vertical') {\r\n          volumeSlider.style.cursor = ''\r\n        }\r\n      }\r\n      //évènements clavier\r\n      container.on('keydown', function(e){\r\n        container.classList.add('amst__keyboard-active')\r\n        _showControls()\r\n        if ([37,38,39,40,77].includes(e.which)) e.preventDefault()\r\n        if (e.which > 36 && e.which < 41) {\r\n          if ((e.which == 38 || e.which == 40) && d.activeElement != volumeSlider) {\r\n            if (videoVolumeOrientation == 'vertical') {\r\n              volumeSlider.on('transitionend', function onTransitionEnd(){\r\n                this.removeEventListener('transitionend', onTransitionEnd)\r\n                this.focus()\r\n              })\r\n              volumeButton.focus()\r\n            } else volumeSlider.focus();\r\n          }\r\n          if ((e.which == 37 || e.which == 39) && d.activeElement != slider) {\r\n            slider.focus()\r\n          }\r\n        }\r\n        switch (e.which) {\r\n          case 77://M->Mute/Unmute\r\n            if (self.params.volumeButton.disabled !== true && self.params.volumeButton.hidden !== true) {\r\n              volumeButton.dispatchEvent(new MouseEvent('click'))\r\n              volumeButton.focus()\r\n            }\r\n            break\r\n          case 40://Arrow Down\r\n            if (self.params.volumeButton.disabled !== true && self.params.volumeButton.hidden !== true) {\r\n              self.volume = Math.max(0, self.volume - 0.05)\r\n            }\r\n            break\r\n          case 38://Arrow Up\r\n            if (self.params.volumeButton.disabled !== true && self.params.volumeButton.hidden !== true) {\r\n              self.volume = Math.min(1, self.volume + 0.05)\r\n            }\r\n            break\r\n          case 37://Arrow Left\r\n            self.currentTime = Math.max(0, self.currentTime - skipTime)\r\n            break\r\n          case 39://Arrow Right\r\n            self.currentTime = Math.min(self.duration, self.currentTime + skipTime)\r\n            break\r\n          case 32://Space\r\n            if (d.activeElement == playPauseButton) {\r\n              return\r\n            } else if (d.activeElement.nodeName != 'BUTTON') {\r\n              e.preventDefault()\r\n              self.togglePlayPause()\r\n            }\r\n            break\r\n        }\r\n      }, false)\r\n    }\r\n/************************************************\r\n *                                              *\r\n *          FIN VOLUME POTENTIOMÈTRE            *\r\n *                                              *\r\n *          /////////////////////////           *\r\n *                                              *\r\n *                 FULLSCREEN                   *\r\n *                                              *\r\n ************************************************/\r\n    /*\r\n    Lorsqu'on passe en plein écran, les propriétés pageXOffset et pageYOffset de window sont modifiées.\r\n    Si l'on ne prend pas de précautions, à la sortie du plein écran, la page aura perdu son scroll initial.\r\n    On intialise donc deux variables scrollX et scrollY dans lesquelles on stockera les valeurs de scroll\r\n    avant le passage en plein écran pour pouvoir les rétablir à la sortie.\r\n    Au passage en mode plein écran, on pose un écouteur spécifique sur l'événement resize.\r\n    Dans ce mode, le display du wrapper passe en flex et on pose un margin:auto sur le container\r\n    afin d'assurer son centrage horizontal et vertical.\r\n    Si l'écran est plus large que la vidéo, le container est centré horizontalement, sa hauteur est fixée à 100%, \r\n    son padding-bottom est annulé et sa largeur est déterminée grâce au format de la vidéo.\r\n    Dans le cas contraire, le container est centré verticalement, son padding-bottom est donné par le format de la vidéo et sa largeur fixée à 100%.\r\n    À la sortie du plein écran, on assure un nettoyage des styles ajoutés.\r\n    */\r\n    if (fullscreenAPI) {\r\n      let scrollX = 0, \r\n          scrollY = 0\r\n      const fullScreenButton = $('.amst__fullscreen>button')\r\n      fullScreenButton.on('click', ()=>{\r\n        if (d[fullscreenAPI.fullscreenElement] !== null) {//On est en mode plein écran\r\n          //On en sort\r\n          d[fullscreenAPI.exitFullscreen]()\r\n        } else {//On n'est pas en mode plein écran\r\n          //On mémorise la position dans la page pour pouvoir la rétablir à la sortie du plein écran\r\n          scrollX = w.pageXOffset\r\n          scrollY = w.pageYOffset\r\n          //On passe en plein écran\r\n          wrapper[fullscreenAPI.requestFullscreen]()\r\n          // container[fullscreenAPI.requestFullscreen]()\r\n          //On initialise la propriété currentFullScreenPlayer de la class\r\n          AmstramgramVideoPlayer.currentFullScreenPlayer = self\r\n        }\r\n      })\r\n      //Ecoute de l'évènement fullscreenchange\r\n      d.addEventListener(fullscreenAPI.fullscreenchange, function(){\r\n        if (d[fullscreenAPI.fullscreenElement] == wrapper) {//Si le player passe en plein écran\r\n          //Écoute du resize\r\n          w.addEventListener('optimizedResize', resizeFullScreen)\r\n          wrapper.classList.add('amst__isfullscreen')\r\n          //On enlève la transition sur la padding du container\r\n          container.classList.add('amst__notransition')\r\n          //Mise à jour du bouton et de ses labels\r\n          fullScreenButton.setAttributes({\r\n            title: exitFullScreenLabel,\r\n            'aria-label': exitFullScreenLabel,\r\n            class:' amst__unfullscreen'\r\n          })\r\n          resizeFullScreen()\r\n        } else if (AmstramgramVideoPlayer.currentFullScreenPlayer == self){//Si le player sort du plein écran\r\n          //On retire l'écouteur sur le resize\r\n          w.removeEventListener('optimizedResize', resizeFullScreen)\r\n          //On reset les dimensions éventuellement spécifiées par la fonction resizeFullScreen\r\n          container.setAttribute('style',`padding-bottom:${1 / self.params.format * 100}%`)\r\n          wrapper.classList.remove('amst__isfullscreen')\r\n          //Mise à jour du bouton et de ses labels\r\n          fullScreenButton.setAttributes({\r\n            title: enterFullScreenLabel,\r\n            'aria-label': enterFullScreenLabel,\r\n            class: ''\r\n          })\r\n          //On se repositionne sur la page\r\n          setTimeout(()=>{\r\n            w.scroll(scrollX, scrollY)\r\n            //On remet la transition sur le padding du container\r\n            setTimeout(()=>{container.classList.remove('amst__notransition')},50)\r\n          },50)\r\n          //On reset la propriété currentFullScreenPlayer de la class\r\n          AmstramgramVideoPlayer.currentFullScreenPlayer = undefined\r\n        }\r\n      }, false);\r\n      const resizeFullScreen = function() {\r\n        if (w.innerWidth / w.innerHeight > self.params.format) {//Si l'écran est plus large que la vidéo\r\n          container.css({\r\n            width: w.innerHeight * self.params.format + 'px',\r\n            height: '100%',\r\n            'paddingBottom': 0\r\n          })\r\n        } else {\r\n          container.css({\r\n            width: '100%',\r\n            height: 'auto',\r\n            'paddingBottom': 1 / self.params.format * 100 + '%'\r\n          })\r\n        }\r\n        resize()\r\n      }\r\n    }\r\n/************************************************\r\n *                                              *\r\n *                FIN FULLSCREEN                *\r\n *                                              *\r\n *          /////////////////////////           *\r\n *                                              *\r\n *                    RESIZE                    *\r\n *                                              *\r\n ************************************************/\r\n    /*\r\n    On effectue une mesure des éléments HTML\r\n    Cette opération est pondérée par un setTimeout afin d'éviter les redondances.\r\n    Elle est en effet appelée à chaque fois qu'un bouton est mis à jour.\r\n    Si plusieurs boutons sont modifiés en même temps, elle n'est ainsi effectuée qu'une fois.\r\n    */\r\n    function getControlsElementsWidth(){\r\n      if (timeoutGetControlsElementsWidth) clearTimeout(timeoutGetControlsElementsWidth)\r\n      timeoutGetControlsElementsWidth = setTimeout(function(){\r\n        controlsElementsWidth = 0\r\n        $$('.amst__controls>div:not(.amst__rail):not(.amst__hidden):not(.amst__time-duration)').forEach(el=>{\r\n          if (el.classList.contains('amst__time')) {\r\n            controlsElementsWidth += (2 * el.offsetWidth)\r\n          } else {\r\n            controlsElementsWidth += el.offsetWidth\r\n          }\r\n        })\r\n      resize()\r\n      },1)\r\n    }\r\n    \r\n    w.addEventListener('optimizedResize', resize)\r\n    w.addEventListener('optimizedScroll', resize)\r\n\r\n    function resize(){\r\n      playerWidth = container.offsetWidth\r\n      if (playerWidth - controlsPadding - controlsElementsWidth < AmstramgramVideoPlayer.defaultOptions.railMinWidthForNormalUI) {\r\n        container.classList.add('amst__compact')\r\n      } else {\r\n        container.classList.remove('amst__compact')\r\n      }\r\n      let sliderRect = slider.getBoundingClientRect()\r\n      sliderLeft = sliderRect.left\r\n      sliderWidth = sliderRect.width\r\n      updateTimeRail()\r\n      //Si le format de la source est modifiée, l'abscisse du potentiomètre de volume en mode vertical \r\n      //ne sera fixée qu'à la fin de l'animation posée sur le padding-bottom du container.\r\n      if (!IS_MOBILE) {\r\n        const updateVolumeRect = function(e) {\r\n          volumeRect = $('.amst__volume-total').getBoundingClientRect()\r\n          if (e && e.target == container) {\r\n            container.off('transitionend', updateVolumeRect)\r\n          }\r\n        }\r\n        container.on('transitionend', updateVolumeRect, false)\r\n        updateVolumeRect()\r\n      }\r\n    }\r\n/************************************************\r\n *                                              *\r\n *                  FIN RESIZE                  *\r\n *                                              *\r\n *          /////////////////////////           *\r\n *                                              *\r\n *                 FINALISATION                 *\r\n *                                              *\r\n ************************************************/\r\n    if (params && typeof params.oninit === \"function\") {\r\n      setTimeout(function(){params.oninit(self)},1)\r\n    }\r\n\r\n    //La fonction pointerDetected() écoute l'évènement 'pointerDetected' dispatché par la class\r\n    //lorsque le type de pointeur a été détecté.\r\n    function pointerDetected(){\r\n      container.removeEventListener('pointerDetected', pointerDetected)\r\n      if (_pointerType != 'touch') container.classList.add('amst__no-touch')\r\n    }\r\n    //Si la class n'a pas encore détecté le type de pointeur, on se prépare à réagir à sa future détection\r\n    if (_pointerType == 'unknown') {\r\n      container.addEventListener('pointerDetected', pointerDetected, false)\r\n    } else if (_pointerType != 'touch') {\r\n      container.classList.add('amst__no-touch')\r\n    }\r\n    //On ajoute l'instance dans le tableau regroupant toutes les autres instances de players\r\n    AmstramgramVideoPlayer.players.push(this)\r\n  }\r\n/************************************************\r\n *                                              *\r\n *                  FIN RESIZE                  *\r\n *               FIN CONSTRUCTOR                *\r\n *                                              *\r\n *          /////////////////////////           *\r\n *                                              *\r\n *                GETTERS/SETTERS               *\r\n *                                              *\r\n ************************************************/\r\n  set src(src){\r\n    /*\r\n    src est :\r\n      - soit une chaine renvoyant vers la source vidéo\r\n      - soit un objet de la forme \r\n        {\r\n          src: 'chemin du fichier vidéo',\r\n          format: 'rapport largeur/hauteur de la vidéo',\r\n          poster: 'chemin du fichier poster',\r\n          volume: 'volume',\r\n          duration: 'durée de la vidéo en seconde',\r\n          skipTime: 'valeur de l'incrément temporel lorsque l'utilisateur appuie sur les flèches gauche ou droite de son clavier'\r\n          thumbnails: 'chemin du fichier des vignettes',\r\n          previous: objet,\r\n          next: objet,\r\n          fullscreen: objet,\r\n          download: objet,\r\n        }\r\n    */\r\n    this.container.dispatchEvent(new CustomEvent('amstEvent__src',{'detail': src}))\r\n  }\r\n  get src(){\r\n    return this.media.getAttribute('src')\r\n  }\r\n\r\n  get paused(){\r\n    return this.media.paused\r\n  }\r\n  get duration(){\r\n    return this.media.duration\r\n  }\r\n\r\n  set currentTime(t) {\r\n    if (this.media.duration && t >= 0 && t <= this.media.duration) {\r\n      this.media.currentTime = t\r\n    }\r\n  }\r\n  get currentTime(){\r\n    return this.media.currentTime\r\n  }\r\n\r\n  set volume(vol){\r\n    this.media.volume = vol\r\n  }\r\n  get volume(){\r\n    return this.media.volume\r\n  }\r\n/************************************************\r\n *                                              *\r\n *             FIN GETTERS/SETTERS              *\r\n *                                              *\r\n *          /////////////////////////           *\r\n *                                              *\r\n *                  MÉTHODES                    *\r\n *                                              *\r\n ************************************************/\r\n  pause(){\r\n    this.container.dispatchEvent(new CustomEvent('amstEvent__pause'))\r\n  }\r\n\r\n  play(){\r\n    this.container.dispatchEvent(new CustomEvent('amstEvent__play'))\r\n  }\r\n\r\n  reset(){\r\n    this.pause()\r\n    this.container.dispatchEvent(new CustomEvent('amstEvent__reset'))\r\n  }\r\n \r\n  togglePlayPause(){\r\n    if (this.paused) {\r\n      this.play()\r\n    } else {\r\n      this.pause()\r\n    }\r\n  }\r\n\r\n  hideControls(delayed = false, forced = false){\r\n    this.container.dispatchEvent(new CustomEvent('amstEvent__hideControls',{'detail':{delayed: delayed, forced: forced}}))\r\n  }\r\n\r\n  showControls(){\r\n    this.container.dispatchEvent(new CustomEvent('amstEvent__showControls'))\r\n  }\r\n\r\n  previous(opt){\r\n    if (isObject(opt)) {\r\n      //Mise à jour des paramètres\r\n      this.params = mergeDeep(this.params, {previous:opt})\r\n      //Génération de l'événement qui va provoquer la mise à jour\r\n      this.container.dispatchEvent(new CustomEvent('amstEvent__previousButton'))\r\n    }\r\n  }\r\n  next(opt){\r\n    if (isObject(opt)) {\r\n      this.params = mergeDeep(this.params, {next:opt})\r\n      this.container.dispatchEvent(new CustomEvent('amstEvent__nextButton'))\r\n    }\r\n  }\r\n  fullscreen(opt){\r\n    if (isObject(opt)) {\r\n      this.params = mergeDeep(this.params, {fullscreen:opt})\r\n      this.container.dispatchEvent(new CustomEvent('amstEvent__fullscreenButton'))\r\n    }\r\n  }\r\n  download(opt){\r\n    if (isObject(opt)) {\r\n      this.params = mergeDeep(this.params, {download:opt})\r\n      this.container.dispatchEvent(new CustomEvent('amstEvent__downloadButton'))\r\n    }\r\n  }\r\n  volumeButton(opt){\r\n    if (isObject(opt)) {\r\n      this.params = mergeDeep(this.params, {volumeButton:opt})\r\n      this.container.dispatchEvent(new CustomEvent('amstEvent__volumeButton'))\r\n    }\r\n  }\r\n}\r\n/************************************************\r\n *                                              *\r\n *             FIN GETTERS/SETTERS              *\r\n *                  FIN CLASS                   *\r\n *                                              *\r\n *          /////////////////////////           *\r\n *                                              *\r\n *             PROPRIÉTÉS GLOBALES              *\r\n *                                              *\r\n ************************************************/\r\nAmstramgramVideoPlayer.currentPlayer = undefined\r\nAmstramgramVideoPlayer.players = []\r\nAmstramgramVideoPlayer.defaultOptions = {\r\n  autoplay: false,\r\n  crossorigin: 'anonymous',\r\n  download: {label:'Télécharger', disabled:false, hidden:false},\r\n  duration: 120,\r\n  format: 16/9,\r\n  fullscreen: {label:{enter:'Plein écran', exit:'Quitter le plein écran'}, disabled:false, hidden:false},\r\n  loop: false,\r\n  next: {label:'Suivant', disabled:true, hidden:true},\r\n  playsinline: true,\r\n  poster: undefined,\r\n  preload: 'none',\r\n  previous: {label:'Précédent', disabled:true, hidden:true},\r\n  skipTime: '1%',\r\n  thumbnails: {src:undefined, number:100},\r\n  volume: 0.8,\r\n  volumeButton: {label:{mute:'Désactiver le son', unmute:'Activer le son'}, disabled:false, hidden:false},\r\n  //Players properties\r\n  volumeGroup: 0,\r\n  hideControlsDelay: 5000,\r\n  videoVolumeOrientation: 'vertical',\r\n  railMinWidthForNormalUI: 600,\r\n  //Global properties\r\n  appLabel:'Lecteur Vidéo',\r\n  pauseLabel:'Pause',\r\n  playLabel:'Lecture',\r\n  volumeHelpLabel:'Utilisez les flèches Haut/Bas du clavier pour augmenter ou diminuer le volume.',\r\n  volumeSliderLabel:'Potentiomètre de volume',\r\n}\r\n/************************************************\r\n *                                              *\r\n *           FIN PROPRIÉTÉS GLOBALES            *\r\n *                                              *\r\n *          /////////////////////////           *\r\n *                                              *\r\n *                   BUILDUI                    *\r\n *                                              *\r\n ************************************************/\r\nfunction buildUI(params){\r\n  let videoVolumeHTMLString = '',\r\n      volumeSliderHTMLString = ''\r\n  if (!IS_MOBILE) {\r\n    volumeSliderHTMLString = `\r\n      <div class=\"amst__volume-slider\" aria-label=\"${params.volumeSliderLabel}\" aria-valuemin=\"0\" aria-valuemax=\"100\" aria-valuenow=\"100\" aria-valuetext=\"100%\" role=\"slider\" aria-orientation=\"${params.videoVolumeOrientation}\" tabindex=\"0\" title=\"${params.volumeHelpLabel}\">\r\n        <span class=\"amst__offscreen\">${params.volumeHelpLabel}</span>\r\n        <div class=\"amst__volume-total\">\r\n          <div class=\"amst__volume-current\" style=\"height: 100%;\"></div>`\r\n    if(params.videoVolumeOrientation != 'horizontal') {\r\n      volumeSliderHTMLString += `<div class=\"amst__volume-handle\" style=\"bottom: 100%; margin-bottom: -3px;\"></div>`\r\n    }\r\n    volumeSliderHTMLString += `</div></div>`\r\n  }\r\n  videoVolumeHTMLString = `\r\n    <div class=\"amst__button amst__volumebutton\">\r\n      <button type=\"button\" tabindex=\"0\"></button>`\r\n  if (params.videoVolumeOrientation != 'horizontal') {\r\n    videoVolumeHTMLString += (volumeSliderHTMLString + '</div>')\r\n  } else {\r\n    videoVolumeHTMLString += ('</div>' + volumeSliderHTMLString)\r\n  }\r\n\r\n  let buildUIStr = `\r\n    <span class=\"amst__offscreen\">${params.appLabel}</span>\r\n    <div class=\"amst__container\" tabindex=\"0\" role=\"application\" aria-label=\"${params.appLabel}\">\r\n      <div class=\"amst__mediaelement\">\r\n        <video></video>\r\n      </div>\r\n    <div class=\"amst__layers\">\r\n      <div class=\"amst__layer-poster\">\r\n        <canvas></canvas>\r\n      </div>\r\n      <div class=\"amst__layer-loading\">\r\n        <div class=\"amst__loading\">\r\n          <span class=\"amst__svg\"></span>\r\n        </div>\r\n      </div>\r\n      <div class=\"amst__layer-play\">\r\n        <div class=\"amst__svg\" role=\"button\" tabindex=\"0\" aria-label=\"${params.playLabel}\" aria-pressed=\"false\"></div>\r\n      </div>\r\n      <div class=\"amst__layer-seeking-touch\">\r\n        <div class=\"amst__seeking-touch-cache\"></div>\r\n        <span class=\"amst__time amst__seeking-touch\">\r\n          <span></span>\r\n        </span>\r\n      </div>\r\n    </div>\r\n    <div class=\"amst__controls\">\r\n      <div class=\"amst__button amst__previous\">\r\n        <button type=\"button\" title=\"${params.previous.label}\" aria-label=\"${params.previous.label}\" tabindex=\"0\"></button>\r\n      </div>\r\n      <div class=\"amst__button amst__playpause\">\r\n        <button type=\"button\" title=\"${params.playLabel}\" aria-label=\"${params.playLabel}\" tabindex=\"0\"></button>\r\n      </div>\r\n      <div class=\"amst__button amst__next\">\r\n        <button type=\"button\" title=\"${params.next.label}\" aria-label=\"${params.next.label}\" tabindex=\"0\"></button>\r\n      </div>\r\n      <div class=\"amst__time\" role=\"timer\" aria-live=\"off\">\r\n        <span class=\"amst__currenttime\">00:00</span>\r\n      </div>\r\n      <div class=\"amst__rail\">\r\n        <span class=\"amst__slider\" role=\"slider\" tabindex=\"0\">\r\n          <span class=\"amst__buffering-bar\"></span>\r\n          <canvas class=\"amst__loaded-bar\"></canvas>\r\n          <span class=\"amst__currenttime-bar\"></span>\r\n          <span class=\"amst__handle\"><span></span></span>\r\n          <span class=\"amst__cursor\"><span></span></span>\r\n          <span class=\"amst__seeking-wrapper\">\r\n            <span class=\"amst__time amst__seeking\">\r\n              <span>00:00</span>\r\n            </span>\r\n          </span>\r\n        </span>\r\n      </div>\r\n      <div class=\"amst__time amst__time-duration\">\r\n        <span class=\"amst__duration\">00:00</span>\r\n      </div>`\r\n  buildUIStr += videoVolumeHTMLString\r\n  if (fullscreenAPI) buildUIStr +=  `        \r\n      <div class=\"amst__button amst__fullscreen\">\r\n        <button type=\"button\" title=\"${params.fullscreen.label}\" aria-label=\"${params.fullscreen.label}\" tabindex=\"0\"></button>\r\n      </div>`\r\n  buildUIStr += `\r\n      <div class=\"amst__button amst__download\">\r\n        <button type=\"button\" title=\"${params.download.label}\" aria-label=\"${params.download.label}\" tabindex=\"0\"></button>\r\n      </div>\r\n    </div>\r\n  `\r\n  return buildUIStr\r\n}\r\n/************************************************\r\n *                                              *\r\n *                 FIN BUILDUI                  *\r\n *                                              *\r\n *          /////////////////////////           *\r\n *                                              *\r\n *                 UTILITAIRES                  *\r\n *                                              *\r\n ************************************************/\r\nfunction secondsToTimeCode(t, long){\r\n  t = Math.round(t)\r\n  let h = Math.floor(t / 3600),\r\n      m = Math.floor((t - h * 3600) / 60),\r\n      s = Math.round(t % 60)\r\n  h = (h>9)?h+':':(h>0)?'0'+h+':':long?'00:':''\r\n  m = (m>9)?m:'0'+m\r\n  s = (s>9)?s:'0'+s\r\n\treturn h + m +  ':' + s\r\n}\r\n\r\n//http://js-bits.blogspot.com/2010/07/canvas-rounded-corner-rectangles.html\r\nclass AmstRoundedRect{\r\n  constructor(ctx, h, x, w) {\r\n    let y = 0, r = 2;\r\n    ctx.beginPath();\r\n    ctx.moveTo(x + r, y);\r\n    ctx.lineTo(x + w - r, y);\r\n    ctx.quadraticCurveTo(x + w, y, x + w, y + r);\r\n    ctx.lineTo(x + w, y + h - r);\r\n    ctx.quadraticCurveTo(x + w, y + h, x + w - r, y + h);\r\n    ctx.lineTo(x + r, y + h);\r\n    ctx.quadraticCurveTo(x, y + h, x, y + h - r);\r\n    ctx.lineTo(x, y + r);\r\n    ctx.quadraticCurveTo(x, y, x + r, y);\r\n    ctx.closePath();\r\n    ctx.fill();\r\n  }\r\n}\r\n\r\nlet throttle = (type, name, obj = w)=>{\r\n  let running = false,\r\n      func = (e)=>{\r\n        if (running) return\r\n        running = true\r\n        requestAnimationFrame(()=>{\r\n          obj.dispatchEvent(new CustomEvent(name, {detail:e}))\r\n          running = false\r\n        })\r\n      }\r\n  obj.addEventListener(type, func)\r\n};\r\nthrottle('resize', 'optimizedResize')\r\nthrottle('scroll', 'optimizedScroll')\r\n\r\n//https://stackoverflow.com/a/37164538\r\nfunction isObject(item) {\r\n  return (item && typeof item === 'object' && !Array.isArray(item));\r\n}\r\n\r\nfunction mergeDeep(target, source) {\r\n  let output = Object.assign({}, target)\r\n  if (isObject(target) && isObject(source)) {\r\n    Object.keys(source).forEach(key => {\r\n      if (isObject(source[key])) {\r\n        if (!(key in target))\r\n          Object.assign(output, { [key]: source[key] })\r\n        else\r\n          output[key] = mergeDeep(target[key], source[key])\r\n      } else {\r\n        Object.assign(output, { [key]: source[key] })\r\n      }\r\n    })\r\n  }\r\n  return output\r\n}\r\n/************************************************\r\n *                                              *\r\n *               FIN UTILITAIRES                *\r\n *                                              *\r\n *          /////////////////////////           *\r\n *                                              *\r\n *                   $ et $$                    *\r\n *                                              *\r\n ************************************************/\r\nlet _$ = (context)=>{\r\n  let $ = function(selector) {\r\n    let el = (typeof selector === 'string')?context.querySelector(selector):selector\r\n    if (el) {\r\n      el.css = (newCSS)=>{\r\n        if (typeof newCSS === 'string') {\r\n          let v = w.getComputedStyle(el, null).getPropertyValue(newCSS)\r\n          return isNaN(parseFloat(v))?v:(parseFloat(v))\r\n        } else {\r\n          Object.assign(el.style, newCSS)\r\n          return el\t\t\r\n        }\r\n      }\r\n      el.setAttributes = (attrs)=>{\r\n        Object.keys(attrs).forEach(key=>el.setAttribute(key, attrs[key]))\r\n      }\r\n      el.on = function(events, handler, options = false){\r\n        events.split(' ').forEach(e=>el.addEventListener(e, handler, options));\r\n        return el\t\t\r\n      }\r\n      el.off = function(events, handler){\r\n        events.split(' ').forEach(e=>el.removeEventListener(e, handler));\r\n        return el\t\t\r\n      }\r\n    }\r\n    return el\r\n  }\r\n  return $\r\n}\r\n\r\nlet _$$ = (context)=>{\r\n  let $$ = (selector)=>{\r\n    let els = (Array.isArray(selector))?selector:Array.from(context.querySelectorAll(selector))\r\n    els.css = (newCSS)=>{\r\n      if (typeof newCSS === 'string') {\r\n        let v = window.getComputedStyle(els[0], null).getPropertyValue(newCSS)\r\n        return isNaN(parseFloat(v))?v:(parseFloat(v))\r\n      } else {\r\n        els.forEach(el=>{\r\n          Object.assign(el.style, newCSS)\r\n        })\r\n        return els\t\t\r\n      }\r\n    }\r\n    els.on = function(events, handler, options = false){\r\n      els.forEach(el=>{\r\n        events.split(' ').forEach(e=>el.addEventListener(e, handler, options));\r\n      })\r\n      return els\t\t\r\n    }\r\n    els.off = function(events, handler){\r\n      els.forEach(el=>{\r\n        events.split(' ').forEach(e=>el.removeEventListener(e, handler));\r\n      })\r\n      return els\t\t\r\n    }\r\n    let r = (els.length)?els:null\r\n    return r\r\n  }\r\n  return $$\r\n}\r\n/************************************************\r\n *                                              *\r\n *              THIS IS THE END...              *\r\n *                                              *\r\n ************************************************///# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./app/js/amstramgramVideoPlayer.js\n");

/***/ }),

/***/ "./src/css/main.scss":
/*!***************************!*\
  !*** ./src/css/main.scss ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("// extracted by mini-css-extract-plugin\nmodule.exports = {\"MOBILE_WIDTH\":\"700px\"};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvY3NzL21haW4uc2Nzcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy9EOlxcTGF1cmVudFxcRG9jdW1lbnRzXFxIdG1sXFxhbXN0cmFtZ3JhbVZpZGVvUGxheWVyXFxzcmNcXGNzc1xcbWFpbi5zY3NzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxubW9kdWxlLmV4cG9ydHMgPSB7XCJNT0JJTEVfV0lEVEhcIjpcIjcwMHB4XCJ9OyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/css/main.scss\n");

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _css_main_scss__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./css/main.scss */ \"./src/css/main.scss\");\n/* harmony import */ var _css_main_scss__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_css_main_scss__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _js_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./js/utils */ \"./src/js/utils.js\");\n/* harmony import */ var _app_js_amstramgramVideoPlayer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../app/js/amstramgramVideoPlayer */ \"./app/js/amstramgramVideoPlayer.js\");\n/* harmony import */ var _app_css_amstramgramVideoPlayer_scss__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../app/css/amstramgramVideoPlayer.scss */ \"./app/css/amstramgramVideoPlayer.scss\");\n/* harmony import */ var _app_css_amstramgramVideoPlayer_scss__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_app_css_amstramgramVideoPlayer_scss__WEBPACK_IMPORTED_MODULE_3__);\n\n\n\n\n\nvar // Récupération des constantes déclarées en css\n// Largeur Max du viewport pour basculer le menu en mode hamburger\nMOBILE_WIDTH = parseFloat(_css_main_scss__WEBPACK_IMPORTED_MODULE_0___default.a.MOBILE_WIDTH),\n    w = window,\n    d = document,\n    b = d.body;\nd.addEventListener(\"DOMContentLoaded\", main);\n\nfunction main() {\n  console.log('INIT', Object(_js_utils__WEBPACK_IMPORTED_MODULE_1__[\"$\"])(b), MOBILE_WIDTH);\n  w.addEventListener('resize', resize, false);\n  w.addEventListener('scroll', scroll, false);\n  new _app_js_amstramgramVideoPlayer__WEBPACK_IMPORTED_MODULE_2__[\"default\"](Object(_js_utils__WEBPACK_IMPORTED_MODULE_1__[\"$\"])('video'));\n  resize();\n}\n\nfunction resize() {\n  console.log('resize');\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvaW5kZXguanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vRDovTGF1cmVudC9Eb2N1bWVudHMvSHRtbC9hbXN0cmFtZ3JhbVZpZGVvUGxheWVyL3NyYy9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgJy4vY3NzL21haW4uc2NzcydcclxuaW1wb3J0IHN0eWxlcyBmcm9tIFwiLi9jc3MvbWFpbi5zY3NzXCJcclxuaW1wb3J0IHskLCAkJH0gZnJvbSAnLi9qcy91dGlscydcclxuaW1wb3J0IEFtc3RyYW1ncmFtVmlkZW9QbGF5ZXIgZnJvbSAnLi4vYXBwL2pzL2Ftc3RyYW1ncmFtVmlkZW9QbGF5ZXInXHJcbmltcG9ydCAnLi4vYXBwL2Nzcy9hbXN0cmFtZ3JhbVZpZGVvUGxheWVyLnNjc3MnXHJcblxyXG5jb25zdFxyXG4gIC8vIFLDqWN1cMOpcmF0aW9uIGRlcyBjb25zdGFudGVzIGTDqWNsYXLDqWVzIGVuIGNzc1xyXG4gIC8vIExhcmdldXIgTWF4IGR1IHZpZXdwb3J0IHBvdXIgYmFzY3VsZXIgbGUgbWVudSBlbiBtb2RlIGhhbWJ1cmdlclxyXG4gIE1PQklMRV9XSURUSCA9IHBhcnNlRmxvYXQoc3R5bGVzLk1PQklMRV9XSURUSCksXHJcbiAgdyA9IHdpbmRvdyxcclxuICBkID0gZG9jdW1lbnQsXHJcbiAgYiA9IGQuYm9keVxyXG5cclxuZC5hZGRFdmVudExpc3RlbmVyKFwiRE9NQ29udGVudExvYWRlZFwiLCBtYWluKVxyXG5cclxuZnVuY3Rpb24gbWFpbigpe1xyXG4gIGNvbnNvbGUubG9nKCdJTklUJywgJChiKSwgTU9CSUxFX1dJRFRIKVxyXG4gIHcuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgcmVzaXplLCBmYWxzZSlcclxuICB3LmFkZEV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIHNjcm9sbCwgZmFsc2UpXHJcbiAgbmV3IEFtc3RyYW1ncmFtVmlkZW9QbGF5ZXIoJCgndmlkZW8nKSlcclxuICByZXNpemUoKVxyXG59XHJcblxyXG5mdW5jdGlvbiByZXNpemUoKXtcclxuICBjb25zb2xlLmxvZygncmVzaXplJylcclxufSJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBSEE7QUFBQTtBQUFBO0FBUUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/index.js\n");

/***/ }),

/***/ "./src/js/utils.js":
/*!*************************!*\
  !*** ./src/js/utils.js ***!
  \*************************/
/*! exports provided: gePositionStickySupport, next, $, $$ */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"gePositionStickySupport\", function() { return gePositionStickySupport; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"next\", function() { return next; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"$\", function() { return $; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"$$\", function() { return $$; });\nfunction gePositionStickySupport() {\n  var el = document.createElement('a'),\n      mStyle = el.style;\n  mStyle.cssText = \"position:sticky;position:-webkit-sticky;position:-ms-sticky;\";\n  return mStyle.position.indexOf('sticky') !== -1;\n}\nfunction next(el) {\n  do {\n    el = el.nextSibling;\n  } while (el && el.nodeType !== 1);\n\n  return el;\n}\nfunction $(selector) {\n  var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : document;\n  var el = typeof selector === 'string' ? context.querySelector(selector) : selector;\n\n  if (el) {\n    el.css = function (newCSS) {\n      if (typeof newCSS === 'string') {\n        var v = window.getComputedStyle(el, null).getPropertyValue(newCSS);\n        return isNaN(parseFloat(v)) ? v : parseFloat(v);\n      } else {\n        Object.assign(ln.style, newCSS);\n        return el;\n      }\n    };\n\n    el.setAttributes = function (attrs) {\n      Object.keys(attrs).forEach(function (key) {\n        return attrs[key] ? el.setAttribute(key, attrs[key]) : el.removeAttribute(key);\n      });\n    };\n\n    el.on = function (events, handler) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      events.split(' ').forEach(function (e) {\n        return el.addEventListener(e, handler, options);\n      });\n      return el;\n    };\n\n    el.off = function (events, handler) {\n      events.split(' ').forEach(function (e) {\n        return el.removeEventListener(e, handler);\n      });\n      return el;\n    };\n  }\n\n  return el;\n}\nfunction $$(selector) {\n  var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : document;\n  var els = Array.from(context.querySelectorAll(selector));\n\n  els.css = function (newCSS) {\n    if (typeof newCSS === 'string') {\n      var v = window.getComputedStyle(els[0], null).getPropertyValue(newCSS);\n      return isNaN(parseFloat(v)) ? v : parseFloat(v);\n    } else {\n      els.forEach(function (el) {\n        Object.assign(el.style, newCSS);\n      });\n      return els;\n    }\n  };\n\n  els.on = function (events, handler) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    els.forEach(function (el) {\n      events.split(' ').forEach(function (e) {\n        return el.addEventListener(e, handler, options);\n      });\n    });\n    return els;\n  };\n\n  els.off = function (events, handler) {\n    els.forEach(function (el) {\n      events.split(' ').forEach(function (e) {\n        return el.removeEventListener(e, handler);\n      });\n    });\n    return els;\n  };\n\n  var r = els.length ? els : null;\n  return r;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvanMvdXRpbHMuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vRDovTGF1cmVudC9Eb2N1bWVudHMvSHRtbC9hbXN0cmFtZ3JhbVZpZGVvUGxheWVyL3NyYy9qcy91dGlscy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZnVuY3Rpb24gZ2VQb3NpdGlvblN0aWNreVN1cHBvcnQoKSB7XHJcbiAgbGV0IGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpLCBtU3R5bGUgPSBlbC5zdHlsZVxyXG4gIG1TdHlsZS5jc3NUZXh0ID0gXCJwb3NpdGlvbjpzdGlja3k7cG9zaXRpb246LXdlYmtpdC1zdGlja3k7cG9zaXRpb246LW1zLXN0aWNreTtcIlxyXG4gIHJldHVybiBtU3R5bGUucG9zaXRpb24uaW5kZXhPZignc3RpY2t5JykhPT0tMVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gbmV4dChlbCkge1xyXG4gIGRvIHtcclxuXHRcdGVsID0gZWwubmV4dFNpYmxpbmc7XHJcbiAgfSB3aGlsZSAoZWwgJiYgZWwubm9kZVR5cGUgIT09IDEpO1xyXG4gIHJldHVybiBlbDsgICAgICAgIFxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gJChzZWxlY3RvciwgY29udGV4dCA9IGRvY3VtZW50KSB7XHJcblx0bGV0IGVsID0gKHR5cGVvZiBzZWxlY3RvciA9PT0gJ3N0cmluZycpP2NvbnRleHQucXVlcnlTZWxlY3RvcihzZWxlY3Rvcik6c2VsZWN0b3JcclxuXHRpZiAoZWwpIHtcclxuXHRcdGVsLmNzcyA9IGZ1bmN0aW9uKG5ld0NTUyl7XHJcblx0XHRcdGlmICh0eXBlb2YgbmV3Q1NTID09PSAnc3RyaW5nJykge1xyXG5cdFx0XHRcdGxldCB2ID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoZWwsIG51bGwpLmdldFByb3BlcnR5VmFsdWUobmV3Q1NTKVxyXG5cdFx0XHRcdHJldHVybiBpc05hTihwYXJzZUZsb2F0KHYpKT92OihwYXJzZUZsb2F0KHYpKVxyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdE9iamVjdC5hc3NpZ24obG4uc3R5bGUsIG5ld0NTUylcclxuXHRcdFx0XHRyZXR1cm4gZWxcdFx0XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHRcdGVsLnNldEF0dHJpYnV0ZXMgPSAoYXR0cnMpPT57XHJcblx0XHRcdE9iamVjdC5rZXlzKGF0dHJzKS5mb3JFYWNoKGtleSA9PiAoYXR0cnNba2V5XSk/ZWwuc2V0QXR0cmlidXRlKGtleSwgYXR0cnNba2V5XSk6ZWwucmVtb3ZlQXR0cmlidXRlKGtleSkpXHJcblx0XHR9XHJcblx0XHRlbC5vbiA9IGZ1bmN0aW9uKGV2ZW50cywgaGFuZGxlciwgb3B0aW9ucyA9IGZhbHNlKXtcclxuXHRcdFx0ZXZlbnRzLnNwbGl0KCcgJykuZm9yRWFjaChlPT5lbC5hZGRFdmVudExpc3RlbmVyKGUsIGhhbmRsZXIsIG9wdGlvbnMpKTtcclxuXHRcdFx0cmV0dXJuIGVsXHRcdFxyXG5cdFx0fVxyXG5cdFx0ZWwub2ZmID0gZnVuY3Rpb24oZXZlbnRzLCBoYW5kbGVyKXtcclxuXHRcdFx0ZXZlbnRzLnNwbGl0KCcgJykuZm9yRWFjaChlPT5lbC5yZW1vdmVFdmVudExpc3RlbmVyKGUsIGhhbmRsZXIpKTtcclxuXHRcdFx0cmV0dXJuIGVsXHRcdFxyXG5cdFx0fVxyXG5cdH1cclxuXHRyZXR1cm4gZWxcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uICQkKHNlbGVjdG9yLCBjb250ZXh0ID0gZG9jdW1lbnQpIHtcclxuXHRsZXQgZWxzID0gQXJyYXkuZnJvbShjb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpKVxyXG5cdGVscy5jc3MgPSBmdW5jdGlvbihuZXdDU1Mpe1xyXG5cdFx0aWYgKHR5cGVvZiBuZXdDU1MgPT09ICdzdHJpbmcnKSB7XHJcblx0XHRcdGxldCB2ID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoZWxzWzBdLCBudWxsKS5nZXRQcm9wZXJ0eVZhbHVlKG5ld0NTUylcclxuXHRcdFx0cmV0dXJuIGlzTmFOKHBhcnNlRmxvYXQodikpP3Y6KHBhcnNlRmxvYXQodikpXHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRlbHMuZm9yRWFjaChlbCA9PiB7XHJcblx0XHRcdFx0T2JqZWN0LmFzc2lnbihlbC5zdHlsZSwgbmV3Q1NTKVxyXG5cdFx0XHR9KVxyXG5cdFx0XHRyZXR1cm4gZWxzXHRcdFxyXG5cdFx0fVxyXG5cdH1cclxuXHRlbHMub24gPSBmdW5jdGlvbihldmVudHMsIGhhbmRsZXIsIG9wdGlvbnMgPSBmYWxzZSl7XHJcblx0XHRlbHMuZm9yRWFjaChlbD0+e1xyXG5cdFx0XHRldmVudHMuc3BsaXQoJyAnKS5mb3JFYWNoKGU9PmVsLmFkZEV2ZW50TGlzdGVuZXIoZSwgaGFuZGxlciwgb3B0aW9ucykpO1xyXG5cdFx0fSlcclxuXHRcdHJldHVybiBlbHNcdFx0XHJcblx0fVxyXG5cdGVscy5vZmYgPSBmdW5jdGlvbihldmVudHMsIGhhbmRsZXIpe1xyXG5cdFx0ZWxzLmZvckVhY2goZWw9PntcclxuXHRcdFx0ZXZlbnRzLnNwbGl0KCcgJykuZm9yRWFjaChlPT5lbC5yZW1vdmVFdmVudExpc3RlbmVyKGUsIGhhbmRsZXIpKTtcclxuXHRcdH0pXHJcblx0XHRyZXR1cm4gZWxzXHJcblx0fVxyXG5cdGxldCByID0gKGVscy5sZW5ndGgpP2VsczpudWxsXHJcblx0cmV0dXJuIHJcclxufSJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBRUE7QUFBQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBRUE7QUFBQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/js/utils.js\n");

/***/ })

/******/ });